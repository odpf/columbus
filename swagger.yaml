swagger: "2.0"
info:
  title: "Data Discovery and Lineage Service"
  description: "Data Discovery and Lineage Service"
  version: 0.1.9
paths:
  "/v1beta1/assets":
    get:
      tags:
        - Assets
      summary: Get list of assets
      description: "Returns list of assets, optionally filtered by type and service"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: query
          name: type
          description: "filter by type"
          type: string
          format: asset_type
        - in: query
          name: service
          description: "filter by service"
          type: string
        - in: query
          name: size
          description: "maximum size to fetch"
          type: number
        - in: query
          name: offset
          description: "offset to fetch from"
          type: number
        - in: query
          name: with_total
          description: "if set include total field in response"
          type: boolean
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/Asset"
              total:
                type: number
                example: 1800
        500:
          description: "internal server error"
          schema:
            $ref: "#/definitions/InternalServerError"
    put:
      tags:
        - Assets
      summary: Upsert an asset
      description: "Create a new asset if a combination of urn, type and service does not exist. If exists update instead"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: body
          name: ""
          required: true
          schema:
            $ref: "#/definitions/BaseAsset"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              id:
                $ref: "#/definitions/UUID"
        400:
          description: "validation error"
          schema:
            $ref: "#/definitions/ValidationError"
        500:
          description: "internal server error"
          schema:
            $ref: "#/definitions/InternalServerError"
  "/v1beta1/assets/{id}":
    get:
      tags:
        - Assets
      summary: Find an asset
      description: "Returns a single asset with given ID"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "asset's ID"
          type: string
          format: uuid
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Asset"
        404:
          description: "not found error"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "internal server error"
          schema:
            $ref: "#/definitions/InternalServerError"
    delete:
      tags:
        - Assets
      summary: Delete an asset
      description: "Delete a single asset with given ID"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "asset's ID"
          type: string
          format: uuid
          required: true
      responses:
        204:
          description: OK
          schema:
            type: string
            example: OK
        404:
          description: "not found error"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "internal server error"
          schema:
            $ref: "#/definitions/InternalServerError"
  "/v1beta1/assets/{id}/stargazers":
    get:
      tags:
        - Assets
      summary: Find users that stars an asset
      description: "Returns a list of users that stars an asset"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "asset's ID"
          type: string
          format: uuid
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        400:
          description: "bad request error"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "not found error"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "internal server error"
          schema:
            $ref: "#/definitions/InternalServerError"
  "/v1beta1/assets/{id}/versions":
    get:
      tags:
        - Assets
      summary: Get version history of an asset
      description: "Returns a list of asset version history"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "asset's ID"
          type: string
          format: uuid
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/AssetVersion"
        400:
          description: "bad request error"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "not found error"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "internal server error"
          schema:
            $ref: "#/definitions/InternalServerError"
  "/v1beta1/assets/{id}/versions/{version}":
    get:
      tags:
        - Assets
      summary: Get asset's prev version
      description: "Returns a specific version of an asset"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "asset's ID"
          type: string
          format: uuid
          required: true
        - in: path
          name: version
          description: "asset's version"
          type: string
          format: semver
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Asset"
        400:
          description: "bad request error"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "not found error"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "internal server error"
          schema:
            $ref: "#/definitions/InternalServerError"
  "/v1beta1/lineage/{type}/{record}":
    get:
      tags:
        - Lineage
      summary: lineage get api
      description: "Returns lineage graph of a single record. For BQTable to BQTable lineage, set collapse to true"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: query
          name: collapse
          type: boolean
        - in: path
          name: type
          description: "asset's type"
          type: string
          format: asset_type
          required: true
        - in: path
          name: record
          description: "record's id"
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/AdjacencyMap"
        404:
          description: invalid type requested
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/types":
    get:
      tags:
        - Type
      summary: fetch all types
      description: used to fetch all types
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/definitions/Type"
                - type: object
                  properties:
                    count:
                      type: number
                      example: 1800
  "/v1beta1/types/{name}/records":
    put:
      tags:
        - Record
      summary: upload documents for a given type.
      description: Use this API for adding records for a certain type. The document can have any number of fields, however; it must atleast have fields specified by 'title' and 'id' properties on type.record_attributes. The value of these properties must be string and they must be located at the object root.
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: name
          type: string
          required: true
        - in: body
          name: payload
          schema:
            type: array
            items:
              $ref: "#/definitions/Record"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Status"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
    get:
      tags:
        - Record
      summary: list records for the type
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: name
          type: string
          required: true
        - in: query
          name: filter.environment
          type: string
          description: environment name for filtering the records only for specific environment
        - in: query
          name: select
          type: string
          description: comma separated list of fields to return per record (only toplevel keys are supported)
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Record"
        400:
          description: bad input
          schema:
            $ref: "#/definitions/Error"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/types/{name}/records/{id}":
    delete:
      tags:
        - Record
      summary: delete a record in a type by its record ID
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: name
          type: string
          required: true
        - in: path
          name: id
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            type: string
            example: success
        404:
          description: type or record cannot be found
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/types/{name}/{id}":
    get:
      tags:
        - Record
      summary: get a record by id
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: name
          type: string
          required: true
        - in: path
          name: id
          type: string
          required: true
      produces:
        - "application/json"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Record"
        404:
          description: document or type does not exist
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/search":
    get:
      tags:
        - Search
      summary: search for records
      description: "API for querying documents. 'text' is fuzzy matched against all the available datasets, and matched results are returned. You can specify additional match criteria using 'filter.*' query parameters. You can specify each filter multiple times to specify a set of values for those filters. For instance, to specify two landscape 'vn' and 'th', the query could be `/search/?text=<text>&filter.environment=integration&filter.landscape=vn&filter.landscape=th`"
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: query
          name: "text"
          description: "text to search for (fuzzy)"
          required: true
          type: string
        - in: query
          description: "number of results to return"
          name: "size"
          type: integer
        - in: query
          name: "filter.environment"
          type: string
          description: "restrict results to specified environment(s) eg, integrated, test, staging, production"
        - in: query
          name: "filter.landscape"
          type: string
          description: "restrict results to specified landscape(s)"
        - in: query
          name: "filter.entity"
          type: string
          description: "restrict results to specified organisation"
        - in: query
          name: "filter.type"
          type: string
          description: 'restrict results to the specified types (as in a Columbus type, for instance "dagger", or "firehose")'
        - in: query
          name: "rankby"
          type: string
          description: 'descendingly sort based on a numeric field in the record. the nested field is written with period separated field name. eg, "data.profile.usage_count"'
        - in: query
          name: "searchby"
          type: string
          description: 'search on a specific records field. the nested field is written with period separated field name. eg, "data.schema.columns.name"'
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/SearchResult"
        400:
          description: misconfigured request parameters
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/tags":
    post:
      tags:
        - Tag
      summary: Tag a record
      description: Tag a record in a type with a tag template
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: body
          name: ""
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Tag"
              - required:
                  - record_type
                  - record_urn
                  - template_urn
                  - tag_values
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Tag"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        409:
          description: duplicate tags
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/tags/templates":
    get:
      tags:
        - Tag
      summary: Get all tag templates
      description: Get all available tag templates
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/TagTemplate"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Tag
      summary: Create a template
      description: Create a new tag template
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: body
          name: ""
          schema:
            allOf:
              - $ref: "#/definitions/TagTemplate"
              - required:
                  - urn
                  - display_name
                  - description
                  - fields
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/TagTemplate"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        409:
          description: duplicate template
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/tags/templates/{template_urn}":
    get:
      tags:
        - Tag
      summary: Get a tag templates
      description: Get a single tag templates
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: template_urn
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/TagTemplate"
        404:
          description: template not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Tag
      summary: Update a template
      description: Update an existing tag template
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: template_urn
          type: string
          required: true
        - in: body
          name: ""
          schema:
            allOf:
              - $ref: "#/definitions/TagTemplate"
              - required:
                  - display_name
                  - description
                  - fields
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/TagTemplate"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        404:
          description: template not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Tag
      summary: Delete a tag templates
      description: Delete a single tag templates
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: template_urn
          type: string
          required: true
      responses:
        204:
          description: Deleted
          schema:
            type: string
            example: "Deleted"
        404:
          description: template not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/tags/types/{type}/records/{record_urn}":
    get:
      tags:
        - Tag
      summary: Get a record's tags
      description: Get all tags for a record in a type
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: type
          type: string
          required: true
        - in: path
          name: record_urn
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Tag"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/tags/types/{type}/records/{record_urn}/templates/{template_urn}":
    get:
      tags:
        - Tag
      summary: Find a tag by record and template
      description: Find a single tag using record urn and template urn
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: type
          type: string
          required: true
        - in: path
          name: record_urn
          type: string
          required: true
        - in: path
          name: template_urn
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Tag"
        404:
          description: record is not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Tag
      summary: Update a tag on a record
      description: Update a tag on a record in a type
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: type
          type: string
          required: true
        - in: path
          name: record_urn
          type: string
          required: true
        - in: path
          name: template_urn
          type: string
          required: true
        - in: body
          name: ""
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Tag"
              - required:
                  - tag_values
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/Tag"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        404:
          description: tag is not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Tag
      summary: Remove a tag on a record
      description: Remove a tag on a record in a type
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: type
          type: string
          required: true
        - in: path
          name: record_urn
          type: string
          required: true
        - in: path
          name: template_urn
          type: number
          required: true
      responses:
        204:
          description: Removed
        400:
          description: template_urn is required
          schema:
            $ref: "#/definitions/ValidationError"
        404:
          description: record is not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/user/starred":
    get:
      tags:
        - User
        - Star
      summary: Get user starred assets
      description: Get all assets starred by a user
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Star"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/user/starred/{asset_id}":
    put:
      tags:
        - User
        - Star
      summary: Star an asset
      description: Mark an asset by a user with a star
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: asset_id
          type: string
          required: true
      responses:
        204:
          description: OK
          schema:
            type: object
            properties:
              id:
                $ref: "#/definitions/UUID"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - User
        - Star
      summary: Untar an asset
      description: Unmark a starred asset of a user
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: asset_id
          type: string
          required: true
      responses:
        204:
          description: No Content
          schema:
            type: string
            example: success
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - User
        - Star
      summary: Get a starred asset of a user
      description: Get a specific starred asset of a user
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: asset_id
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Star"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
  "/v1beta1/users/{user_id}/starred":
    get:
      tags:
        - User
        - Star
      summary: Get assets starred by a user
      description: Get all assets starred by a user
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Columbus-User-Email
          type: string
          format: email
          required: true
        - in: path
          name: user_id
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Star"
        400:
          description: validation error
          schema:
            $ref: "#/definitions/ValidationError"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
definitions:
  BaseAsset:
    type: object
    properties:
      urn:
        type: string
        example: "sample-urn"
      type:
        $ref: "#/definitions/AssetType"
      name:
        type: string
        example: "sample-name"
      service:
        type: string
        example: "bigquery"
      description:
        type: string
        example: "sample description"
      data:
        type: object
        description: "dynamic object"
      labels:
        type: object
        description: "map of string"
  Asset:
    type: object
    allOf:
      - type: object
        properties:
          id:
            $ref: "#/definitions/UUID"
            description: "Main asset identifer in UUID"
      - $ref: "#/definitions/BaseAsset"
      - $ref: "#/definitions/Timestamps"
  AssetType:
    type: string
    enum:
      - table
      - job
      - topic
      - dashboard
  AssetVersion:
    type: object
    properties:
      id:
        type: object
        $ref: "#/definitions/UUID"
      urn:
        type: string
        example: "sample-urn"
      type:
        type: object
        $ref: "#/definitions/AssetType"
      service:
        type: string
        example: "bigquery"
      version:
        type: string
        example: "0.1"
      Changelog:
        type: object
        $ref: "#/definitions/Changelog"
      updated_by:
        type: string
        example: "user@odpf.io"
      created_at:
        type: string
      updated_at:
        type: string
  Changelog:
    type: array
    items:
      type: object
      properties:
        type:
          type: string
        path:
          type: array
          items:
            type: string
        from:
          type: string
        to:
          type: string
  User:
    type: object
    properties:
      id:
        type: string
        description: id of a user
        format: uuid
      email:
        type: string
        description: email of a user
        format: email
      provider:
        type: string
        description: provider of user identity
  Star:
    type: object
    properties:
      asset_type:
        type: string
        description: name of the type (for e.g. dagger, firehose)
      asset_urn:
        type: string
      created_at:
        type: string
      updated_at:
        type: string
  Record:
    type: object
    properties:
      urn:
        type: string
        example: "sample-urn"
      name:
        type: string
        example: "sample-name"
      service:
        type: string
        example: "bigquery"
      description:
        type: string
        example: "sample description"
      data:
        type: object
        description: "dynamic object"
      labels:
        type: object
        description: "map of string"
      upstreams:
        $ref: "#/definitions/LineageRecord"
      downstreams:
        $ref: "#/definitions/LineageRecord"
      created_at:
        type: string
      updated_at:
        type: string
  Tag:
    type: object
    properties:
      record_type:
        type: string
      record_urn:
        type: string
      template_urn:
        type: string
      tag_values:
        type: array
        items:
          type: object
          required:
            - field_id
            - field_value
          properties:
            field_id:
              type: number
            field_value:
              type: object
            field_urn:
              type: string
            field_display_name:
              type: string
            field_description:
              type: string
            field_data_type:
              type: string
            field_options:
              type: array
              items:
                type: string
            field_required:
              type: boolean
            created_at:
              type: string
            updated_at:
              type: string
      template_display_name:
        type: string
      template_description:
        type: string
  TagTemplate:
    type: object
    properties:
      urn:
        type: string
      display_name:
        type: string
      description:
        type: string
      fields:
        type: array
        items:
          type: object
          required:
            - urn
            - display_name
            - description
            - data_type
          properties:
            id:
              type: number
            urn:
              type: string
            display_name:
              type: string
            description:
              type: string
            data_type:
              type: string
              enum:
                - string
                - double
                - boolean
                - enumerated
                - datetime
            options:
              type: array
              items:
                type: string
            required:
              type: boolean
            created_at:
              type: string
            updated_at:
              type: string
      created_at:
        type: string
      updated_at:
        type: string
  Status:
    type: object
    properties:
      status:
        type: string
        default: success
  LineageRecord:
    type: object
    properties:
      urn:
        type: string
        example: "sample-urn"
      type:
        type: string
        description: "Columbus registered type"
        example: "table"
  AdjacencyEntry:
    type: object
    properties:
      urn:
        type: string
      type:
        type: string
      downstreams:
        type: array
        items:
          type: string
      upstreams:
        type: array
        items:
          type: string
  AdjacencyMap:
    type: object
    properties:
      "<NodeLabel>":
        $ref: "#/definitions/AdjacencyEntry"
  UUID:
    type: string
    description: "UUID"
    example: "2a46cf6a-ac75-4327-a34b-4f8ed33c1162"
  Type:
    type: object
    properties:
      name:
        type: string
        description: name of the type (for e.g. dagger, firehose)
  Timestamps:
    type: object
    properties:
      created_at:
        type: string
        example: "0001-01-01T00:00:00Z"
      updated_at:
        type: string
        example: "0001-01-01T00:00:00Z"
  Error:
    type: object
    properties:
      reason:
        type: string
        description: "error message"
  SearchResult:
    type: object
    properties:
      id:
        type: string
        description: "URN of the record"
      title:
        type: string
        description: "describes the record in a human readable form"
      type:
        type: string
        description: "the individual type of the record. For example: dagger, firehose"
      description:
        type: string
        description: "optional description of the record"
      labels:
        type: object
        description: "key value pairs describing the labels configured for the given type of record. Example of labels: team, created, owner etc"
  InternalServerError:
    type: object
    properties:
      reason:
        type: string
        description: "Internal Server Error"
        example: "Internal Server Error - (ref: 188239132)"
  ValidationError:
    allOf:
      - $ref: "#/definitions/Error"
      - type: object
        properties:
          details:
            type: object
            description: error details. the keys are integer indices for the records that failed validation, and the value is a string describing the reason why that record fails validation
