// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// ValidateUser provides a mock function with given fields: ctx, uuid, email
func (_m *UserService) ValidateUser(ctx context.Context, uuid string, email string) (string, error) {
	ret := _m.Called(ctx, uuid, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, uuid, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, uuid, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ValidateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUser'
type UserService_ValidateUser_Call struct {
	*mock.Call
}

// ValidateUser is a helper method to define mock.On call
//  - ctx context.Context
//  - uuid string
//  - email string
func (_e *UserService_Expecter) ValidateUser(ctx interface{}, uuid interface{}, email interface{}) *UserService_ValidateUser_Call {
	return &UserService_ValidateUser_Call{Call: _e.mock.On("ValidateUser", ctx, uuid, email)}
}

func (_c *UserService_ValidateUser_Call) Run(run func(ctx context.Context, uuid string, email string)) *UserService_ValidateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_ValidateUser_Call) Return(_a0 string, _a1 error) *UserService_ValidateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
