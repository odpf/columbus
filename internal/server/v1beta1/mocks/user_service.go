// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	namespace "github.com/odpf/compass/core/namespace"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// ValidateUser provides a mock function with given fields: ctx, ns, uuid, email
func (_m *UserService) ValidateUser(ctx context.Context, ns *namespace.Namespace, uuid string, email string) (string, error) {
	ret := _m.Called(ctx, ns, uuid, email)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespace.Namespace, string, string) (string, error)); ok {
		return rf(ctx, ns, uuid, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespace.Namespace, string, string) string); ok {
		r0 = rf(ctx, ns, uuid, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespace.Namespace, string, string) error); ok {
		r1 = rf(ctx, ns, uuid, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ValidateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUser'
type UserService_ValidateUser_Call struct {
	*mock.Call
}

// ValidateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ns *namespace.Namespace
//   - uuid string
//   - email string
func (_e *UserService_Expecter) ValidateUser(ctx interface{}, ns interface{}, uuid interface{}, email interface{}) *UserService_ValidateUser_Call {
	return &UserService_ValidateUser_Call{Call: _e.mock.On("ValidateUser", ctx, ns, uuid, email)}
}

func (_c *UserService_ValidateUser_Call) Run(run func(ctx context.Context, ns *namespace.Namespace, uuid string, email string)) *UserService_ValidateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*namespace.Namespace), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UserService_ValidateUser_Call) Return(_a0 string, _a1 error) *UserService_ValidateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_ValidateUser_Call) RunAndReturn(run func(context.Context, *namespace.Namespace, string, string) (string, error)) *UserService_ValidateUser_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
