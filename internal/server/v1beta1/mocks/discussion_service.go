// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	discussion "github.com/odpf/compass/core/discussion"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// DiscussionService is an autogenerated mock type for the DiscussionService type
type DiscussionService struct {
	mock.Mock
}

type DiscussionService_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscussionService) EXPECT() *DiscussionService_Expecter {
	return &DiscussionService_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function with given fields: ctx, cmt
func (_m *DiscussionService) CreateComment(ctx context.Context, cmt *discussion.Comment) (string, error) {
	ret := _m.Called(ctx, cmt)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *discussion.Comment) string); ok {
		r0 = rf(ctx, cmt)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *discussion.Comment) error); ok {
		r1 = rf(ctx, cmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionService_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type DiscussionService_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//  - ctx context.Context
//  - cmt *discussion.Comment
func (_e *DiscussionService_Expecter) CreateComment(ctx interface{}, cmt interface{}) *DiscussionService_CreateComment_Call {
	return &DiscussionService_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, cmt)}
}

func (_c *DiscussionService_CreateComment_Call) Run(run func(ctx context.Context, cmt *discussion.Comment)) *DiscussionService_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*discussion.Comment))
	})
	return _c
}

func (_c *DiscussionService_CreateComment_Call) Return(_a0 string, _a1 error) *DiscussionService_CreateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateDiscussion provides a mock function with given fields: ctx, _a1
func (_m *DiscussionService) CreateDiscussion(ctx context.Context, _a1 *discussion.Discussion) (string, error) {
	ret := _m.Called(ctx, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *discussion.Discussion) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *discussion.Discussion) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionService_CreateDiscussion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDiscussion'
type DiscussionService_CreateDiscussion_Call struct {
	*mock.Call
}

// CreateDiscussion is a helper method to define mock.On call
//  - ctx context.Context
//  - _a1 *discussion.Discussion
func (_e *DiscussionService_Expecter) CreateDiscussion(ctx interface{}, _a1 interface{}) *DiscussionService_CreateDiscussion_Call {
	return &DiscussionService_CreateDiscussion_Call{Call: _e.mock.On("CreateDiscussion", ctx, _a1)}
}

func (_c *DiscussionService_CreateDiscussion_Call) Run(run func(ctx context.Context, _a1 *discussion.Discussion)) *DiscussionService_CreateDiscussion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*discussion.Discussion))
	})
	return _c
}

func (_c *DiscussionService_CreateDiscussion_Call) Return(_a0 string, _a1 error) *DiscussionService_CreateDiscussion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteComment provides a mock function with given fields: ctx, commentID, discussionID
func (_m *DiscussionService) DeleteComment(ctx context.Context, commentID string, discussionID string) error {
	ret := _m.Called(ctx, commentID, discussionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, commentID, discussionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscussionService_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type DiscussionService_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//  - ctx context.Context
//  - commentID string
//  - discussionID string
func (_e *DiscussionService_Expecter) DeleteComment(ctx interface{}, commentID interface{}, discussionID interface{}) *DiscussionService_DeleteComment_Call {
	return &DiscussionService_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, commentID, discussionID)}
}

func (_c *DiscussionService_DeleteComment_Call) Run(run func(ctx context.Context, commentID string, discussionID string)) *DiscussionService_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DiscussionService_DeleteComment_Call) Return(_a0 error) *DiscussionService_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetComment provides a mock function with given fields: ctx, commentID, discussionID
func (_m *DiscussionService) GetComment(ctx context.Context, commentID string, discussionID string) (discussion.Comment, error) {
	ret := _m.Called(ctx, commentID, discussionID)

	var r0 discussion.Comment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) discussion.Comment); ok {
		r0 = rf(ctx, commentID, discussionID)
	} else {
		r0 = ret.Get(0).(discussion.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, commentID, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionService_GetComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComment'
type DiscussionService_GetComment_Call struct {
	*mock.Call
}

// GetComment is a helper method to define mock.On call
//  - ctx context.Context
//  - commentID string
//  - discussionID string
func (_e *DiscussionService_Expecter) GetComment(ctx interface{}, commentID interface{}, discussionID interface{}) *DiscussionService_GetComment_Call {
	return &DiscussionService_GetComment_Call{Call: _e.mock.On("GetComment", ctx, commentID, discussionID)}
}

func (_c *DiscussionService_GetComment_Call) Run(run func(ctx context.Context, commentID string, discussionID string)) *DiscussionService_GetComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DiscussionService_GetComment_Call) Return(_a0 discussion.Comment, _a1 error) *DiscussionService_GetComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetComments provides a mock function with given fields: ctx, discussionID, filter
func (_m *DiscussionService) GetComments(ctx context.Context, discussionID string, filter discussion.Filter) ([]discussion.Comment, error) {
	ret := _m.Called(ctx, discussionID, filter)

	var r0 []discussion.Comment
	if rf, ok := ret.Get(0).(func(context.Context, string, discussion.Filter) []discussion.Comment); ok {
		r0 = rf(ctx, discussionID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discussion.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, discussion.Filter) error); ok {
		r1 = rf(ctx, discussionID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionService_GetComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComments'
type DiscussionService_GetComments_Call struct {
	*mock.Call
}

// GetComments is a helper method to define mock.On call
//  - ctx context.Context
//  - discussionID string
//  - filter discussion.Filter
func (_e *DiscussionService_Expecter) GetComments(ctx interface{}, discussionID interface{}, filter interface{}) *DiscussionService_GetComments_Call {
	return &DiscussionService_GetComments_Call{Call: _e.mock.On("GetComments", ctx, discussionID, filter)}
}

func (_c *DiscussionService_GetComments_Call) Run(run func(ctx context.Context, discussionID string, filter discussion.Filter)) *DiscussionService_GetComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(discussion.Filter))
	})
	return _c
}

func (_c *DiscussionService_GetComments_Call) Return(_a0 []discussion.Comment, _a1 error) *DiscussionService_GetComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDiscussion provides a mock function with given fields: ctx, did
func (_m *DiscussionService) GetDiscussion(ctx context.Context, did string) (discussion.Discussion, error) {
	ret := _m.Called(ctx, did)

	var r0 discussion.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, string) discussion.Discussion); ok {
		r0 = rf(ctx, did)
	} else {
		r0 = ret.Get(0).(discussion.Discussion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionService_GetDiscussion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiscussion'
type DiscussionService_GetDiscussion_Call struct {
	*mock.Call
}

// GetDiscussion is a helper method to define mock.On call
//  - ctx context.Context
//  - did string
func (_e *DiscussionService_Expecter) GetDiscussion(ctx interface{}, did interface{}) *DiscussionService_GetDiscussion_Call {
	return &DiscussionService_GetDiscussion_Call{Call: _e.mock.On("GetDiscussion", ctx, did)}
}

func (_c *DiscussionService_GetDiscussion_Call) Run(run func(ctx context.Context, did string)) *DiscussionService_GetDiscussion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DiscussionService_GetDiscussion_Call) Return(_a0 discussion.Discussion, _a1 error) *DiscussionService_GetDiscussion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDiscussions provides a mock function with given fields: ctx, filter
func (_m *DiscussionService) GetDiscussions(ctx context.Context, filter discussion.Filter) ([]discussion.Discussion, error) {
	ret := _m.Called(ctx, filter)

	var r0 []discussion.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, discussion.Filter) []discussion.Discussion); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discussion.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, discussion.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionService_GetDiscussions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiscussions'
type DiscussionService_GetDiscussions_Call struct {
	*mock.Call
}

// GetDiscussions is a helper method to define mock.On call
//  - ctx context.Context
//  - filter discussion.Filter
func (_e *DiscussionService_Expecter) GetDiscussions(ctx interface{}, filter interface{}) *DiscussionService_GetDiscussions_Call {
	return &DiscussionService_GetDiscussions_Call{Call: _e.mock.On("GetDiscussions", ctx, filter)}
}

func (_c *DiscussionService_GetDiscussions_Call) Run(run func(ctx context.Context, filter discussion.Filter)) *DiscussionService_GetDiscussions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(discussion.Filter))
	})
	return _c
}

func (_c *DiscussionService_GetDiscussions_Call) Return(_a0 []discussion.Discussion, _a1 error) *DiscussionService_GetDiscussions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PatchDiscussion provides a mock function with given fields: ctx, _a1
func (_m *DiscussionService) PatchDiscussion(ctx context.Context, _a1 *discussion.Discussion) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *discussion.Discussion) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscussionService_PatchDiscussion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDiscussion'
type DiscussionService_PatchDiscussion_Call struct {
	*mock.Call
}

// PatchDiscussion is a helper method to define mock.On call
//  - ctx context.Context
//  - _a1 *discussion.Discussion
func (_e *DiscussionService_Expecter) PatchDiscussion(ctx interface{}, _a1 interface{}) *DiscussionService_PatchDiscussion_Call {
	return &DiscussionService_PatchDiscussion_Call{Call: _e.mock.On("PatchDiscussion", ctx, _a1)}
}

func (_c *DiscussionService_PatchDiscussion_Call) Run(run func(ctx context.Context, _a1 *discussion.Discussion)) *DiscussionService_PatchDiscussion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*discussion.Discussion))
	})
	return _c
}

func (_c *DiscussionService_PatchDiscussion_Call) Return(_a0 error) *DiscussionService_PatchDiscussion_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateComment provides a mock function with given fields: ctx, cmt
func (_m *DiscussionService) UpdateComment(ctx context.Context, cmt *discussion.Comment) error {
	ret := _m.Called(ctx, cmt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *discussion.Comment) error); ok {
		r0 = rf(ctx, cmt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscussionService_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type DiscussionService_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//  - ctx context.Context
//  - cmt *discussion.Comment
func (_e *DiscussionService_Expecter) UpdateComment(ctx interface{}, cmt interface{}) *DiscussionService_UpdateComment_Call {
	return &DiscussionService_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, cmt)}
}

func (_c *DiscussionService_UpdateComment_Call) Run(run func(ctx context.Context, cmt *discussion.Comment)) *DiscussionService_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*discussion.Comment))
	})
	return _c
}

func (_c *DiscussionService_UpdateComment_Call) Return(_a0 error) *DiscussionService_UpdateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewDiscussionService creates a new instance of DiscussionService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscussionService(t testing.TB) *DiscussionService {
	mock := &DiscussionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
