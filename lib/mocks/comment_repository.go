// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	comment "github.com/odpf/columbus/comment"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the Repository type
type CommentRepository struct {
	mock.Mock
}

type CommentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentRepository) EXPECT() *CommentRepository_Expecter {
	return &CommentRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, cmt
func (_m *CommentRepository) Create(ctx context.Context, cmt *comment.Comment) (string, error) {
	ret := _m.Called(ctx, cmt)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *comment.Comment) string); ok {
		r0 = rf(ctx, cmt)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *comment.Comment) error); ok {
		r1 = rf(ctx, cmt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CommentRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - cmt *comment.Comment
func (_e *CommentRepository_Expecter) Create(ctx interface{}, cmt interface{}) *CommentRepository_Create_Call {
	return &CommentRepository_Create_Call{Call: _e.mock.On("Create", ctx, cmt)}
}

func (_c *CommentRepository_Create_Call) Run(run func(ctx context.Context, cmt *comment.Comment)) *CommentRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*comment.Comment))
	})
	return _c
}

func (_c *CommentRepository_Create_Call) Return(_a0 string, _a1 error) *CommentRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Delete provides a mock function with given fields: ctx, commentID, discussionID
func (_m *CommentRepository) Delete(ctx context.Context, commentID string, discussionID string) error {
	ret := _m.Called(ctx, commentID, discussionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, commentID, discussionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CommentRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - commentID string
//  - discussionID string
func (_e *CommentRepository_Expecter) Delete(ctx interface{}, commentID interface{}, discussionID interface{}) *CommentRepository_Delete_Call {
	return &CommentRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, commentID, discussionID)}
}

func (_c *CommentRepository_Delete_Call) Run(run func(ctx context.Context, commentID string, discussionID string)) *CommentRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CommentRepository_Delete_Call) Return(_a0 error) *CommentRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx, commentID, discussionID
func (_m *CommentRepository) Get(ctx context.Context, commentID string, discussionID string) (comment.Comment, error) {
	ret := _m.Called(ctx, commentID, discussionID)

	var r0 comment.Comment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) comment.Comment); ok {
		r0 = rf(ctx, commentID, discussionID)
	} else {
		r0 = ret.Get(0).(comment.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, commentID, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CommentRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - commentID string
//  - discussionID string
func (_e *CommentRepository_Expecter) Get(ctx interface{}, commentID interface{}, discussionID interface{}) *CommentRepository_Get_Call {
	return &CommentRepository_Get_Call{Call: _e.mock.On("Get", ctx, commentID, discussionID)}
}

func (_c *CommentRepository_Get_Call) Run(run func(ctx context.Context, commentID string, discussionID string)) *CommentRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CommentRepository_Get_Call) Return(_a0 comment.Comment, _a1 error) *CommentRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAll provides a mock function with given fields: ctx, discussionID, flt
func (_m *CommentRepository) GetAll(ctx context.Context, discussionID string, flt comment.Filter) ([]comment.Comment, error) {
	ret := _m.Called(ctx, discussionID, flt)

	var r0 []comment.Comment
	if rf, ok := ret.Get(0).(func(context.Context, string, comment.Filter) []comment.Comment); ok {
		r0 = rf(ctx, discussionID, flt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comment.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, comment.Filter) error); ok {
		r1 = rf(ctx, discussionID, flt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommentRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type CommentRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//  - ctx context.Context
//  - discussionID string
//  - flt comment.Filter
func (_e *CommentRepository_Expecter) GetAll(ctx interface{}, discussionID interface{}, flt interface{}) *CommentRepository_GetAll_Call {
	return &CommentRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, discussionID, flt)}
}

func (_c *CommentRepository_GetAll_Call) Run(run func(ctx context.Context, discussionID string, flt comment.Filter)) *CommentRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(comment.Filter))
	})
	return _c
}

func (_c *CommentRepository_GetAll_Call) Return(_a0 []comment.Comment, _a1 error) *CommentRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, cmt
func (_m *CommentRepository) Update(ctx context.Context, cmt *comment.Comment) error {
	ret := _m.Called(ctx, cmt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *comment.Comment) error); ok {
		r0 = rf(ctx, cmt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CommentRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - cmt *comment.Comment
func (_e *CommentRepository_Expecter) Update(ctx interface{}, cmt interface{}) *CommentRepository_Update_Call {
	return &CommentRepository_Update_Call{Call: _e.mock.On("Update", ctx, cmt)}
}

func (_c *CommentRepository_Update_Call) Run(run func(ctx context.Context, cmt *comment.Comment)) *CommentRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*comment.Comment))
	})
	return _c
}

func (_c *CommentRepository_Update_Call) Return(_a0 error) *CommentRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}
