// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	tag "github.com/odpf/columbus/tag"
	mock "github.com/stretchr/testify/mock"
)

// TagTemplateRepository is an autogenerated mock type for the TagTemplateRepository type
type TagTemplateRepository struct {
	mock.Mock
}

type TagTemplateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TagTemplateRepository) EXPECT() *TagTemplateRepository_Expecter {
	return &TagTemplateRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, template
func (_m *TagTemplateRepository) Create(ctx context.Context, template *tag.Template) error {
	ret := _m.Called(ctx, template)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *tag.Template) error); ok {
		r0 = rf(ctx, template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagTemplateRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TagTemplateRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - template *tag.Template
func (_e *TagTemplateRepository_Expecter) Create(ctx interface{}, template interface{}) *TagTemplateRepository_Create_Call {
	return &TagTemplateRepository_Create_Call{Call: _e.mock.On("Create", ctx, template)}
}

func (_c *TagTemplateRepository_Create_Call) Run(run func(ctx context.Context, template *tag.Template)) *TagTemplateRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*tag.Template))
	})
	return _c
}

func (_c *TagTemplateRepository_Create_Call) Return(_a0 error) *TagTemplateRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: ctx, templateURN
func (_m *TagTemplateRepository) Delete(ctx context.Context, templateURN string) error {
	ret := _m.Called(ctx, templateURN)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, templateURN)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagTemplateRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TagTemplateRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - templateURN string
func (_e *TagTemplateRepository_Expecter) Delete(ctx interface{}, templateURN interface{}) *TagTemplateRepository_Delete_Call {
	return &TagTemplateRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, templateURN)}
}

func (_c *TagTemplateRepository_Delete_Call) Run(run func(ctx context.Context, templateURN string)) *TagTemplateRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TagTemplateRepository_Delete_Call) Return(_a0 error) *TagTemplateRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Read provides a mock function with given fields: ctx, templateURN
func (_m *TagTemplateRepository) Read(ctx context.Context, templateURN string) ([]tag.Template, error) {
	ret := _m.Called(ctx, templateURN)

	var r0 []tag.Template
	if rf, ok := ret.Get(0).(func(context.Context, string) []tag.Template); ok {
		r0 = rf(ctx, templateURN)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tag.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateURN)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagTemplateRepository_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type TagTemplateRepository_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//  - ctx context.Context
//  - templateURN string
func (_e *TagTemplateRepository_Expecter) Read(ctx interface{}, templateURN interface{}) *TagTemplateRepository_Read_Call {
	return &TagTemplateRepository_Read_Call{Call: _e.mock.On("Read", ctx, templateURN)}
}

func (_c *TagTemplateRepository_Read_Call) Run(run func(ctx context.Context, templateURN string)) *TagTemplateRepository_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TagTemplateRepository_Read_Call) Return(_a0 []tag.Template, _a1 error) *TagTemplateRepository_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ReadAll provides a mock function with given fields: ctx
func (_m *TagTemplateRepository) ReadAll(ctx context.Context) ([]tag.Template, error) {
	ret := _m.Called(ctx)

	var r0 []tag.Template
	if rf, ok := ret.Get(0).(func(context.Context) []tag.Template); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tag.Template)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagTemplateRepository_ReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAll'
type TagTemplateRepository_ReadAll_Call struct {
	*mock.Call
}

// ReadAll is a helper method to define mock.On call
//  - ctx context.Context
func (_e *TagTemplateRepository_Expecter) ReadAll(ctx interface{}) *TagTemplateRepository_ReadAll_Call {
	return &TagTemplateRepository_ReadAll_Call{Call: _e.mock.On("ReadAll", ctx)}
}

func (_c *TagTemplateRepository_ReadAll_Call) Run(run func(ctx context.Context)) *TagTemplateRepository_ReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TagTemplateRepository_ReadAll_Call) Return(_a0 []tag.Template, _a1 error) *TagTemplateRepository_ReadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, templateURN, template
func (_m *TagTemplateRepository) Update(ctx context.Context, templateURN string, template *tag.Template) error {
	ret := _m.Called(ctx, templateURN, template)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *tag.Template) error); ok {
		r0 = rf(ctx, templateURN, template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagTemplateRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TagTemplateRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - templateURN string
//  - template *tag.Template
func (_e *TagTemplateRepository_Expecter) Update(ctx interface{}, templateURN interface{}, template interface{}) *TagTemplateRepository_Update_Call {
	return &TagTemplateRepository_Update_Call{Call: _e.mock.On("Update", ctx, templateURN, template)}
}

func (_c *TagTemplateRepository_Update_Call) Run(run func(ctx context.Context, templateURN string, template *tag.Template)) *TagTemplateRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*tag.Template))
	})
	return _c
}

func (_c *TagTemplateRepository_Update_Call) Return(_a0 error) *TagTemplateRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}
