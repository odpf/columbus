// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	asset "github.com/odpf/compass/asset"

	discovery "github.com/odpf/compass/discovery"

	mock "github.com/stretchr/testify/mock"
)

// DiscoveryAssetRepository is an autogenerated mock type for the AssetRepository type
type DiscoveryAssetRepository struct {
	mock.Mock
}

type DiscoveryAssetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryAssetRepository) EXPECT() *DiscoveryAssetRepository_Expecter {
	return &DiscoveryAssetRepository_Expecter{mock: &_m.Mock}
}

// CreateOrReplaceMany provides a mock function with given fields: _a0, _a1
func (_m *DiscoveryAssetRepository) CreateOrReplaceMany(_a0 context.Context, _a1 []asset.Asset) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []asset.Asset) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryAssetRepository_CreateOrReplaceMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrReplaceMany'
type DiscoveryAssetRepository_CreateOrReplaceMany_Call struct {
	*mock.Call
}

// CreateOrReplaceMany is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 []asset.Asset
func (_e *DiscoveryAssetRepository_Expecter) CreateOrReplaceMany(_a0 interface{}, _a1 interface{}) *DiscoveryAssetRepository_CreateOrReplaceMany_Call {
	return &DiscoveryAssetRepository_CreateOrReplaceMany_Call{Call: _e.mock.On("CreateOrReplaceMany", _a0, _a1)}
}

func (_c *DiscoveryAssetRepository_CreateOrReplaceMany_Call) Run(run func(_a0 context.Context, _a1 []asset.Asset)) *DiscoveryAssetRepository_CreateOrReplaceMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]asset.Asset))
	})
	return _c
}

func (_c *DiscoveryAssetRepository_CreateOrReplaceMany_Call) Return(_a0 error) *DiscoveryAssetRepository_CreateOrReplaceMany_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *DiscoveryAssetRepository) Delete(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryAssetRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DiscoveryAssetRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *DiscoveryAssetRepository_Expecter) Delete(_a0 interface{}, _a1 interface{}) *DiscoveryAssetRepository_Delete_Call {
	return &DiscoveryAssetRepository_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *DiscoveryAssetRepository_Delete_Call) Run(run func(_a0 context.Context, _a1 string)) *DiscoveryAssetRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DiscoveryAssetRepository_Delete_Call) Return(_a0 error) *DiscoveryAssetRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAll provides a mock function with given fields: ctx, cfg
func (_m *DiscoveryAssetRepository) GetAll(ctx context.Context, cfg discovery.GetConfig) (discovery.AssetList, error) {
	ret := _m.Called(ctx, cfg)

	var r0 discovery.AssetList
	if rf, ok := ret.Get(0).(func(context.Context, discovery.GetConfig) discovery.AssetList); ok {
		r0 = rf(ctx, cfg)
	} else {
		r0 = ret.Get(0).(discovery.AssetList)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, discovery.GetConfig) error); ok {
		r1 = rf(ctx, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryAssetRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type DiscoveryAssetRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//  - ctx context.Context
//  - cfg discovery.GetConfig
func (_e *DiscoveryAssetRepository_Expecter) GetAll(ctx interface{}, cfg interface{}) *DiscoveryAssetRepository_GetAll_Call {
	return &DiscoveryAssetRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, cfg)}
}

func (_c *DiscoveryAssetRepository_GetAll_Call) Run(run func(ctx context.Context, cfg discovery.GetConfig)) *DiscoveryAssetRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(discovery.GetConfig))
	})
	return _c
}

func (_c *DiscoveryAssetRepository_GetAll_Call) Return(_a0 discovery.AssetList, _a1 error) *DiscoveryAssetRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllIterator provides a mock function with given fields: _a0
func (_m *DiscoveryAssetRepository) GetAllIterator(_a0 context.Context) (discovery.AssetIterator, error) {
	ret := _m.Called(_a0)

	var r0 discovery.AssetIterator
	if rf, ok := ret.Get(0).(func(context.Context) discovery.AssetIterator); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.AssetIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryAssetRepository_GetAllIterator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllIterator'
type DiscoveryAssetRepository_GetAllIterator_Call struct {
	*mock.Call
}

// GetAllIterator is a helper method to define mock.On call
//  - _a0 context.Context
func (_e *DiscoveryAssetRepository_Expecter) GetAllIterator(_a0 interface{}) *DiscoveryAssetRepository_GetAllIterator_Call {
	return &DiscoveryAssetRepository_GetAllIterator_Call{Call: _e.mock.On("GetAllIterator", _a0)}
}

func (_c *DiscoveryAssetRepository_GetAllIterator_Call) Run(run func(_a0 context.Context)) *DiscoveryAssetRepository_GetAllIterator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DiscoveryAssetRepository_GetAllIterator_Call) Return(_a0 discovery.AssetIterator, _a1 error) *DiscoveryAssetRepository_GetAllIterator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *DiscoveryAssetRepository) GetByID(_a0 context.Context, _a1 string) (asset.Asset, error) {
	ret := _m.Called(_a0, _a1)

	var r0 asset.Asset
	if rf, ok := ret.Get(0).(func(context.Context, string) asset.Asset); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(asset.Asset)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryAssetRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type DiscoveryAssetRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *DiscoveryAssetRepository_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *DiscoveryAssetRepository_GetByID_Call {
	return &DiscoveryAssetRepository_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *DiscoveryAssetRepository_GetByID_Call) Run(run func(_a0 context.Context, _a1 string)) *DiscoveryAssetRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DiscoveryAssetRepository_GetByID_Call) Return(_a0 asset.Asset, _a1 error) *DiscoveryAssetRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
