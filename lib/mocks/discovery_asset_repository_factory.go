// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	discovery "github.com/odpf/compass/discovery"
	mock "github.com/stretchr/testify/mock"
)

// DiscoveryAssetRepositoryFactory is an autogenerated mock type for the AssetRepositoryFactory type
type DiscoveryAssetRepositoryFactory struct {
	mock.Mock
}

type DiscoveryAssetRepositoryFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryAssetRepositoryFactory) EXPECT() *DiscoveryAssetRepositoryFactory_Expecter {
	return &DiscoveryAssetRepositoryFactory_Expecter{mock: &_m.Mock}
}

// For provides a mock function with given fields: Type
func (_m *DiscoveryAssetRepositoryFactory) For(Type string) (discovery.AssetRepository, error) {
	ret := _m.Called(Type)

	var r0 discovery.AssetRepository
	if rf, ok := ret.Get(0).(func(string) discovery.AssetRepository); ok {
		r0 = rf(Type)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.AssetRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Type)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryAssetRepositoryFactory_For_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'For'
type DiscoveryAssetRepositoryFactory_For_Call struct {
	*mock.Call
}

// For is a helper method to define mock.On call
//  - Type string
func (_e *DiscoveryAssetRepositoryFactory_Expecter) For(Type interface{}) *DiscoveryAssetRepositoryFactory_For_Call {
	return &DiscoveryAssetRepositoryFactory_For_Call{Call: _e.mock.On("For", Type)}
}

func (_c *DiscoveryAssetRepositoryFactory_For_Call) Run(run func(Type string)) *DiscoveryAssetRepositoryFactory_For_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DiscoveryAssetRepositoryFactory_For_Call) Return(_a0 discovery.AssetRepository, _a1 error) *DiscoveryAssetRepositoryFactory_For_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
