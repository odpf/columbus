// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	asset "github.com/odpf/compass/asset"

	mock "github.com/stretchr/testify/mock"
)

// TypeRepository is an autogenerated mock type for the TypeRepository type
type TypeRepository struct {
	mock.Mock
}

type TypeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TypeRepository) EXPECT() *TypeRepository_Expecter {
	return &TypeRepository_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: _a0
func (_m *TypeRepository) GetAll(_a0 context.Context) (map[asset.Type]int, error) {
	ret := _m.Called(_a0)

	var r0 map[asset.Type]int
	if rf, ok := ret.Get(0).(func(context.Context) map[asset.Type]int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[asset.Type]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TypeRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type TypeRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//  - _a0 context.Context
func (_e *TypeRepository_Expecter) GetAll(_a0 interface{}) *TypeRepository_GetAll_Call {
	return &TypeRepository_GetAll_Call{Call: _e.mock.On("GetAll", _a0)}
}

func (_c *TypeRepository_GetAll_Call) Run(run func(_a0 context.Context)) *TypeRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TypeRepository_GetAll_Call) Return(_a0 map[asset.Type]int, _a1 error) *TypeRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
