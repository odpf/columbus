// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	tag "github.com/odpf/columbus/tag"
	mock "github.com/stretchr/testify/mock"
)

// TagRepository is an autogenerated mock type for the TagRepository type
type TagRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *TagRepository) Create(ctx context.Context, _a1 *tag.Tag) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *tag.Tag) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, filter
func (_m *TagRepository) Delete(ctx context.Context, filter tag.Tag) error {
	ret := _m.Called(ctx, filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, tag.Tag) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, filter
func (_m *TagRepository) Read(ctx context.Context, filter tag.Tag) ([]tag.Tag, error) {
	ret := _m.Called(ctx, filter)

	var r0 []tag.Tag
	if rf, ok := ret.Get(0).(func(context.Context, tag.Tag) []tag.Tag); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tag.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, tag.Tag) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *TagRepository) Update(ctx context.Context, _a1 *tag.Tag) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *tag.Tag) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
