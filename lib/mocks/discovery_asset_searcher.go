// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	discovery "github.com/odpf/compass/discovery"
	mock "github.com/stretchr/testify/mock"
)

// DiscoveryAssetSearcher is an autogenerated mock type for the AssetSearcher type
type DiscoveryAssetSearcher struct {
	mock.Mock
}

type DiscoveryAssetSearcher_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryAssetSearcher) EXPECT() *DiscoveryAssetSearcher_Expecter {
	return &DiscoveryAssetSearcher_Expecter{mock: &_m.Mock}
}

// Search provides a mock function with given fields: ctx, cfg
func (_m *DiscoveryAssetSearcher) Search(ctx context.Context, cfg discovery.SearchConfig) ([]discovery.SearchResult, error) {
	ret := _m.Called(ctx, cfg)

	var r0 []discovery.SearchResult
	if rf, ok := ret.Get(0).(func(context.Context, discovery.SearchConfig) []discovery.SearchResult); ok {
		r0 = rf(ctx, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discovery.SearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, discovery.SearchConfig) error); ok {
		r1 = rf(ctx, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryAssetSearcher_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type DiscoveryAssetSearcher_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//  - ctx context.Context
//  - cfg discovery.SearchConfig
func (_e *DiscoveryAssetSearcher_Expecter) Search(ctx interface{}, cfg interface{}) *DiscoveryAssetSearcher_Search_Call {
	return &DiscoveryAssetSearcher_Search_Call{Call: _e.mock.On("Search", ctx, cfg)}
}

func (_c *DiscoveryAssetSearcher_Search_Call) Run(run func(ctx context.Context, cfg discovery.SearchConfig)) *DiscoveryAssetSearcher_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(discovery.SearchConfig))
	})
	return _c
}

func (_c *DiscoveryAssetSearcher_Search_Call) Return(results []discovery.SearchResult, err error) *DiscoveryAssetSearcher_Search_Call {
	_c.Call.Return(results, err)
	return _c
}

// Suggest provides a mock function with given fields: ctx, cfg
func (_m *DiscoveryAssetSearcher) Suggest(ctx context.Context, cfg discovery.SearchConfig) ([]string, error) {
	ret := _m.Called(ctx, cfg)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, discovery.SearchConfig) []string); ok {
		r0 = rf(ctx, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, discovery.SearchConfig) error); ok {
		r1 = rf(ctx, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoveryAssetSearcher_Suggest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Suggest'
type DiscoveryAssetSearcher_Suggest_Call struct {
	*mock.Call
}

// Suggest is a helper method to define mock.On call
//  - ctx context.Context
//  - cfg discovery.SearchConfig
func (_e *DiscoveryAssetSearcher_Expecter) Suggest(ctx interface{}, cfg interface{}) *DiscoveryAssetSearcher_Suggest_Call {
	return &DiscoveryAssetSearcher_Suggest_Call{Call: _e.mock.On("Suggest", ctx, cfg)}
}

func (_c *DiscoveryAssetSearcher_Suggest_Call) Run(run func(ctx context.Context, cfg discovery.SearchConfig)) *DiscoveryAssetSearcher_Suggest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(discovery.SearchConfig))
	})
	return _c
}

func (_c *DiscoveryAssetSearcher_Suggest_Call) Return(suggestions []string, err error) *DiscoveryAssetSearcher_Suggest_Call {
	_c.Call.Return(suggestions, err)
	return _c
}
