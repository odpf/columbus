// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	discussion "github.com/odpf/columbus/discussion"
	mock "github.com/stretchr/testify/mock"
)

// DiscussionRepository is an autogenerated mock type for the Repository type
type DiscussionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *DiscussionRepository) Create(ctx context.Context, _a1 *discussion.Discussion) (string, error) {
	ret := _m.Called(ctx, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *discussion.Discussion) string); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *discussion.Discussion) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, did
func (_m *DiscussionRepository) Get(ctx context.Context, did string) (discussion.Discussion, error) {
	ret := _m.Called(ctx, did)

	var r0 discussion.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, string) discussion.Discussion); ok {
		r0 = rf(ctx, did)
	} else {
		r0 = ret.Get(0).(discussion.Discussion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, filter
func (_m *DiscussionRepository) GetAll(ctx context.Context, filter discussion.Filter) ([]discussion.Discussion, error) {
	ret := _m.Called(ctx, filter)

	var r0 []discussion.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, discussion.Filter) []discussion.Discussion); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]discussion.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, discussion.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssets provides a mock function with given fields: ctx, did
func (_m *DiscussionRepository) GetAssets(ctx context.Context, did string) ([]string, error) {
	ret := _m.Called(ctx, did)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, did)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssignees provides a mock function with given fields: ctx, did
func (_m *DiscussionRepository) GetAssignees(ctx context.Context, did string) ([]string, error) {
	ret := _m.Called(ctx, did)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, did)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLabels provides a mock function with given fields: ctx, did
func (_m *DiscussionRepository) GetLabels(ctx context.Context, did string) ([]string, error) {
	ret := _m.Called(ctx, did)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, did)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, did)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, _a1
func (_m *DiscussionRepository) Patch(ctx context.Context, _a1 *discussion.Discussion) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *discussion.Discussion) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
