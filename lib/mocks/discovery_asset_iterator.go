// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	asset "github.com/odpf/compass/asset"

	mock "github.com/stretchr/testify/mock"
)

// DiscoveryAssetIterator is an autogenerated mock type for the AssetIterator type
type DiscoveryAssetIterator struct {
	mock.Mock
}

type DiscoveryAssetIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *DiscoveryAssetIterator) EXPECT() *DiscoveryAssetIterator_Expecter {
	return &DiscoveryAssetIterator_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *DiscoveryAssetIterator) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoveryAssetIterator_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type DiscoveryAssetIterator_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *DiscoveryAssetIterator_Expecter) Close() *DiscoveryAssetIterator_Close_Call {
	return &DiscoveryAssetIterator_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *DiscoveryAssetIterator_Close_Call) Run(run func()) *DiscoveryAssetIterator_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DiscoveryAssetIterator_Close_Call) Return(_a0 error) *DiscoveryAssetIterator_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// Next provides a mock function with given fields:
func (_m *DiscoveryAssetIterator) Next() []asset.Asset {
	ret := _m.Called()

	var r0 []asset.Asset
	if rf, ok := ret.Get(0).(func() []asset.Asset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]asset.Asset)
		}
	}

	return r0
}

// DiscoveryAssetIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type DiscoveryAssetIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *DiscoveryAssetIterator_Expecter) Next() *DiscoveryAssetIterator_Next_Call {
	return &DiscoveryAssetIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *DiscoveryAssetIterator_Next_Call) Run(run func()) *DiscoveryAssetIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DiscoveryAssetIterator_Next_Call) Return(_a0 []asset.Asset) *DiscoveryAssetIterator_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

// Scan provides a mock function with given fields:
func (_m *DiscoveryAssetIterator) Scan() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DiscoveryAssetIterator_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type DiscoveryAssetIterator_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
func (_e *DiscoveryAssetIterator_Expecter) Scan() *DiscoveryAssetIterator_Scan_Call {
	return &DiscoveryAssetIterator_Scan_Call{Call: _e.mock.On("Scan")}
}

func (_c *DiscoveryAssetIterator_Scan_Call) Run(run func()) *DiscoveryAssetIterator_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DiscoveryAssetIterator_Scan_Call) Return(_a0 bool) *DiscoveryAssetIterator_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}
