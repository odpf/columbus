// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	tag "github.com/odpf/columbus/tag"
	mock "github.com/stretchr/testify/mock"
)

// TagRepository is an autogenerated mock type for the TagRepository type
type TagRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tag
func (_m *TagRepository) Create(t *tag.Tag) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tag.Tag) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: filter
func (_m *TagRepository) Delete(filter tag.Tag) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(tag.Tag) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: filter
func (_m *TagRepository) Read(filter tag.Tag) ([]tag.Tag, error) {
	ret := _m.Called(filter)

	var r0 []tag.Tag
	if rf, ok := ret.Get(0).(func(tag.Tag) []tag.Tag); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tag.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tag.Tag) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: tag
func (_m *TagRepository) Update(t *tag.Tag) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tag.Tag) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
