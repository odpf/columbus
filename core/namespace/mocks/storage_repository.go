// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	namespace "github.com/odpf/compass/core/namespace"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// NamespaceStorageRepository is an autogenerated mock type for the StorageRepository type
type NamespaceStorageRepository struct {
	mock.Mock
}

type NamespaceStorageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NamespaceStorageRepository) EXPECT() *NamespaceStorageRepository_Expecter {
	return &NamespaceStorageRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *NamespaceStorageRepository) Create(_a0 context.Context, _a1 *namespace.Namespace) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespace.Namespace) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *namespace.Namespace) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *namespace.Namespace) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceStorageRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NamespaceStorageRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *namespace.Namespace
func (_e *NamespaceStorageRepository_Expecter) Create(_a0 interface{}, _a1 interface{}) *NamespaceStorageRepository_Create_Call {
	return &NamespaceStorageRepository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *NamespaceStorageRepository_Create_Call) Run(run func(_a0 context.Context, _a1 *namespace.Namespace)) *NamespaceStorageRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*namespace.Namespace))
	})
	return _c
}

func (_c *NamespaceStorageRepository_Create_Call) Return(_a0 string, _a1 error) *NamespaceStorageRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceStorageRepository_Create_Call) RunAndReturn(run func(context.Context, *namespace.Namespace) (string, error)) *NamespaceStorageRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *NamespaceStorageRepository) GetByID(_a0 context.Context, _a1 uuid.UUID) (*namespace.Namespace, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *namespace.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*namespace.Namespace, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *namespace.Namespace); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespace.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceStorageRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type NamespaceStorageRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *NamespaceStorageRepository_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *NamespaceStorageRepository_GetByID_Call {
	return &NamespaceStorageRepository_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *NamespaceStorageRepository_GetByID_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *NamespaceStorageRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *NamespaceStorageRepository_GetByID_Call) Return(_a0 *namespace.Namespace, _a1 error) *NamespaceStorageRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceStorageRepository_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*namespace.Namespace, error)) *NamespaceStorageRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: _a0, _a1
func (_m *NamespaceStorageRepository) GetByName(_a0 context.Context, _a1 string) (*namespace.Namespace, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *namespace.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*namespace.Namespace, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *namespace.Namespace); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespace.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceStorageRepository_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type NamespaceStorageRepository_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *NamespaceStorageRepository_Expecter) GetByName(_a0 interface{}, _a1 interface{}) *NamespaceStorageRepository_GetByName_Call {
	return &NamespaceStorageRepository_GetByName_Call{Call: _e.mock.On("GetByName", _a0, _a1)}
}

func (_c *NamespaceStorageRepository_GetByName_Call) Run(run func(_a0 context.Context, _a1 string)) *NamespaceStorageRepository_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NamespaceStorageRepository_GetByName_Call) Return(_a0 *namespace.Namespace, _a1 error) *NamespaceStorageRepository_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceStorageRepository_GetByName_Call) RunAndReturn(run func(context.Context, string) (*namespace.Namespace, error)) *NamespaceStorageRepository_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0
func (_m *NamespaceStorageRepository) List(_a0 context.Context) ([]*namespace.Namespace, error) {
	ret := _m.Called(_a0)

	var r0 []*namespace.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*namespace.Namespace, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*namespace.Namespace); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*namespace.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceStorageRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type NamespaceStorageRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *NamespaceStorageRepository_Expecter) List(_a0 interface{}) *NamespaceStorageRepository_List_Call {
	return &NamespaceStorageRepository_List_Call{Call: _e.mock.On("List", _a0)}
}

func (_c *NamespaceStorageRepository_List_Call) Run(run func(_a0 context.Context)) *NamespaceStorageRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *NamespaceStorageRepository_List_Call) Return(_a0 []*namespace.Namespace, _a1 error) *NamespaceStorageRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceStorageRepository_List_Call) RunAndReturn(run func(context.Context) ([]*namespace.Namespace, error)) *NamespaceStorageRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *NamespaceStorageRepository) Update(_a0 context.Context, _a1 *namespace.Namespace) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *namespace.Namespace) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceStorageRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NamespaceStorageRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *namespace.Namespace
func (_e *NamespaceStorageRepository_Expecter) Update(_a0 interface{}, _a1 interface{}) *NamespaceStorageRepository_Update_Call {
	return &NamespaceStorageRepository_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *NamespaceStorageRepository_Update_Call) Run(run func(_a0 context.Context, _a1 *namespace.Namespace)) *NamespaceStorageRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*namespace.Namespace))
	})
	return _c
}

func (_c *NamespaceStorageRepository_Update_Call) Return(_a0 error) *NamespaceStorageRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamespaceStorageRepository_Update_Call) RunAndReturn(run func(context.Context, *namespace.Namespace) error) *NamespaceStorageRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewNamespaceStorageRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewNamespaceStorageRepository creates a new instance of NamespaceStorageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNamespaceStorageRepository(t mockConstructorTestingTNewNamespaceStorageRepository) *NamespaceStorageRepository {
	mock := &NamespaceStorageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
