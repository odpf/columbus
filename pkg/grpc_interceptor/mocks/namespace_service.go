// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	namespace "github.com/odpf/compass/core/namespace"

	uuid "github.com/google/uuid"
)

// NamespaceService is an autogenerated mock type for the NamespaceService type
type NamespaceService struct {
	mock.Mock
}

type NamespaceService_Expecter struct {
	mock *mock.Mock
}

func (_m *NamespaceService) EXPECT() *NamespaceService_Expecter {
	return &NamespaceService_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *NamespaceService) GetByID(ctx context.Context, id uuid.UUID) (*namespace.Namespace, error) {
	ret := _m.Called(ctx, id)

	var r0 *namespace.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*namespace.Namespace, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *namespace.Namespace); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespace.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type NamespaceService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *NamespaceService_Expecter) GetByID(ctx interface{}, id interface{}) *NamespaceService_GetByID_Call {
	return &NamespaceService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *NamespaceService_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *NamespaceService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *NamespaceService_GetByID_Call) Return(_a0 *namespace.Namespace, _a1 error) *NamespaceService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceService_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*namespace.Namespace, error)) *NamespaceService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *NamespaceService) GetByName(ctx context.Context, name string) (*namespace.Namespace, error) {
	ret := _m.Called(ctx, name)

	var r0 *namespace.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*namespace.Namespace, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *namespace.Namespace); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*namespace.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceService_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type NamespaceService_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *NamespaceService_Expecter) GetByName(ctx interface{}, name interface{}) *NamespaceService_GetByName_Call {
	return &NamespaceService_GetByName_Call{Call: _e.mock.On("GetByName", ctx, name)}
}

func (_c *NamespaceService_GetByName_Call) Run(run func(ctx context.Context, name string)) *NamespaceService_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NamespaceService_GetByName_Call) Return(_a0 *namespace.Namespace, _a1 error) *NamespaceService_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceService_GetByName_Call) RunAndReturn(run func(context.Context, string) (*namespace.Namespace, error)) *NamespaceService_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewNamespaceService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNamespaceService creates a new instance of NamespaceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNamespaceService(t mockConstructorTestingTNewNamespaceService) *NamespaceService {
	mock := &NamespaceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
