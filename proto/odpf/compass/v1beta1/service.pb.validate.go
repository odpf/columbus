// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: odpf/compass/v1beta1/service.proto

package compassv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllDiscussionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllDiscussionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllDiscussionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllDiscussionsRequestMultiError, or nil if none found.
func (m *GetAllDiscussionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllDiscussionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetType() != "" {

	}

	if m.GetState() != "" {

	}

	if m.GetOwner() != "" {

	}

	if m.GetAssignee() != "" {

	}

	if m.GetAsset() != "" {

	}

	if m.GetLabels() != "" {

	}

	if m.GetSort() != "" {

	}

	if m.GetDirection() != "" {

	}

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetAllDiscussionsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetAllDiscussionsRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAllDiscussionsRequestMultiError(errors)
	}

	return nil
}

// GetAllDiscussionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllDiscussionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllDiscussionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllDiscussionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllDiscussionsRequestMultiError) AllErrors() []error { return m }

// GetAllDiscussionsRequestValidationError is the validation error returned by
// GetAllDiscussionsRequest.Validate if the designated constraints aren't met.
type GetAllDiscussionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllDiscussionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllDiscussionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllDiscussionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllDiscussionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllDiscussionsRequestValidationError) ErrorName() string {
	return "GetAllDiscussionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllDiscussionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllDiscussionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllDiscussionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllDiscussionsRequestValidationError{}

// Validate checks the field values on GetAllDiscussionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllDiscussionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllDiscussionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllDiscussionsResponseMultiError, or nil if none found.
func (m *GetAllDiscussionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllDiscussionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllDiscussionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllDiscussionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllDiscussionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllDiscussionsResponseMultiError(errors)
	}

	return nil
}

// GetAllDiscussionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllDiscussionsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllDiscussionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllDiscussionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllDiscussionsResponseMultiError) AllErrors() []error { return m }

// GetAllDiscussionsResponseValidationError is the validation error returned by
// GetAllDiscussionsResponse.Validate if the designated constraints aren't met.
type GetAllDiscussionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllDiscussionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllDiscussionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllDiscussionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllDiscussionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllDiscussionsResponseValidationError) ErrorName() string {
	return "GetAllDiscussionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllDiscussionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllDiscussionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllDiscussionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllDiscussionsResponseValidationError{}

// Validate checks the field values on CreateDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscussionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscussionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiscussionRequestMultiError, or nil if none found.
func (m *CreateDiscussionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscussionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateDiscussionRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		err := CreateDiscussionRequestValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if m.GetState() != "" {

	}

	if len(m.GetLabels()) > 0 {

		_CreateDiscussionRequest_Labels_Unique := make(map[string]struct{}, len(m.GetLabels()))

		for idx, item := range m.GetLabels() {
			_, _ = idx, item

			if _, exists := _CreateDiscussionRequest_Labels_Unique[item]; exists {
				err := CreateDiscussionRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_CreateDiscussionRequest_Labels_Unique[item] = struct{}{}
			}

			// no validation rules for Labels[idx]
		}

	}

	if len(m.GetAssets()) > 0 {

		_CreateDiscussionRequest_Assets_Unique := make(map[string]struct{}, len(m.GetAssets()))

		for idx, item := range m.GetAssets() {
			_, _ = idx, item

			if _, exists := _CreateDiscussionRequest_Assets_Unique[item]; exists {
				err := CreateDiscussionRequestValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_CreateDiscussionRequest_Assets_Unique[item] = struct{}{}
			}

			// no validation rules for Assets[idx]
		}

	}

	if len(m.GetAssignees()) > 0 {

		_CreateDiscussionRequest_Assignees_Unique := make(map[string]struct{}, len(m.GetAssignees()))

		for idx, item := range m.GetAssignees() {
			_, _ = idx, item

			if _, exists := _CreateDiscussionRequest_Assignees_Unique[item]; exists {
				err := CreateDiscussionRequestValidationError{
					field:  fmt.Sprintf("Assignees[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_CreateDiscussionRequest_Assignees_Unique[item] = struct{}{}
			}

			// no validation rules for Assignees[idx]
		}

	}

	if len(errors) > 0 {
		return CreateDiscussionRequestMultiError(errors)
	}

	return nil
}

// CreateDiscussionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDiscussionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscussionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscussionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscussionRequestMultiError) AllErrors() []error { return m }

// CreateDiscussionRequestValidationError is the validation error returned by
// CreateDiscussionRequest.Validate if the designated constraints aren't met.
type CreateDiscussionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscussionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscussionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscussionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscussionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscussionRequestValidationError) ErrorName() string {
	return "CreateDiscussionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscussionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscussionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscussionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscussionRequestValidationError{}

// Validate checks the field values on CreateDiscussionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscussionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscussionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiscussionResponseMultiError, or nil if none found.
func (m *CreateDiscussionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscussionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDiscussionResponseMultiError(errors)
	}

	return nil
}

// CreateDiscussionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDiscussionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscussionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscussionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscussionResponseMultiError) AllErrors() []error { return m }

// CreateDiscussionResponseValidationError is the validation error returned by
// CreateDiscussionResponse.Validate if the designated constraints aren't met.
type CreateDiscussionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscussionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscussionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscussionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscussionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscussionResponseValidationError) ErrorName() string {
	return "CreateDiscussionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscussionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscussionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscussionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscussionResponseValidationError{}

// Validate checks the field values on GetDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscussionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscussionRequestMultiError, or nil if none found.
func (m *GetDiscussionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscussionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDiscussionRequestMultiError(errors)
	}

	return nil
}

// GetDiscussionRequestMultiError is an error wrapping multiple validation
// errors returned by GetDiscussionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDiscussionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscussionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscussionRequestMultiError) AllErrors() []error { return m }

// GetDiscussionRequestValidationError is the validation error returned by
// GetDiscussionRequest.Validate if the designated constraints aren't met.
type GetDiscussionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscussionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscussionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscussionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscussionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscussionRequestValidationError) ErrorName() string {
	return "GetDiscussionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscussionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscussionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscussionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscussionRequestValidationError{}

// Validate checks the field values on GetDiscussionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscussionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscussionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscussionResponseMultiError, or nil if none found.
func (m *GetDiscussionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscussionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscussionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscussionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscussionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDiscussionResponseMultiError(errors)
	}

	return nil
}

// GetDiscussionResponseMultiError is an error wrapping multiple validation
// errors returned by GetDiscussionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDiscussionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscussionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscussionResponseMultiError) AllErrors() []error { return m }

// GetDiscussionResponseValidationError is the validation error returned by
// GetDiscussionResponse.Validate if the designated constraints aren't met.
type GetDiscussionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscussionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscussionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscussionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscussionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscussionResponseValidationError) ErrorName() string {
	return "GetDiscussionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscussionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscussionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscussionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscussionResponseValidationError{}

// Validate checks the field values on PatchDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchDiscussionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchDiscussionRequestMultiError, or nil if none found.
func (m *PatchDiscussionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchDiscussionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetTitle() != "" {

	}

	if m.GetBody() != "" {

	}

	if m.GetType() != "" {

	}

	if m.GetState() != "" {

	}

	if len(m.GetLabels()) > 0 {

		_PatchDiscussionRequest_Labels_Unique := make(map[string]struct{}, len(m.GetLabels()))

		for idx, item := range m.GetLabels() {
			_, _ = idx, item

			if _, exists := _PatchDiscussionRequest_Labels_Unique[item]; exists {
				err := PatchDiscussionRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_PatchDiscussionRequest_Labels_Unique[item] = struct{}{}
			}

			// no validation rules for Labels[idx]
		}

	}

	if len(m.GetAssets()) > 0 {

		_PatchDiscussionRequest_Assets_Unique := make(map[string]struct{}, len(m.GetAssets()))

		for idx, item := range m.GetAssets() {
			_, _ = idx, item

			if _, exists := _PatchDiscussionRequest_Assets_Unique[item]; exists {
				err := PatchDiscussionRequestValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_PatchDiscussionRequest_Assets_Unique[item] = struct{}{}
			}

			// no validation rules for Assets[idx]
		}

	}

	if len(m.GetAssignees()) > 0 {

		_PatchDiscussionRequest_Assignees_Unique := make(map[string]struct{}, len(m.GetAssignees()))

		for idx, item := range m.GetAssignees() {
			_, _ = idx, item

			if _, exists := _PatchDiscussionRequest_Assignees_Unique[item]; exists {
				err := PatchDiscussionRequestValidationError{
					field:  fmt.Sprintf("Assignees[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_PatchDiscussionRequest_Assignees_Unique[item] = struct{}{}
			}

			// no validation rules for Assignees[idx]
		}

	}

	if len(errors) > 0 {
		return PatchDiscussionRequestMultiError(errors)
	}

	return nil
}

// PatchDiscussionRequestMultiError is an error wrapping multiple validation
// errors returned by PatchDiscussionRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchDiscussionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchDiscussionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchDiscussionRequestMultiError) AllErrors() []error { return m }

// PatchDiscussionRequestValidationError is the validation error returned by
// PatchDiscussionRequest.Validate if the designated constraints aren't met.
type PatchDiscussionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchDiscussionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchDiscussionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchDiscussionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchDiscussionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchDiscussionRequestValidationError) ErrorName() string {
	return "PatchDiscussionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchDiscussionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchDiscussionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchDiscussionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchDiscussionRequestValidationError{}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		err := CreateCommentRequestValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on PatchDiscussionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchDiscussionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchDiscussionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchDiscussionResponseMultiError, or nil if none found.
func (m *PatchDiscussionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchDiscussionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PatchDiscussionResponseMultiError(errors)
	}

	return nil
}

// PatchDiscussionResponseMultiError is an error wrapping multiple validation
// errors returned by PatchDiscussionResponse.ValidateAll() if the designated
// constraints aren't met.
type PatchDiscussionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchDiscussionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchDiscussionResponseMultiError) AllErrors() []error { return m }

// PatchDiscussionResponseValidationError is the validation error returned by
// PatchDiscussionResponse.Validate if the designated constraints aren't met.
type PatchDiscussionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchDiscussionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchDiscussionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchDiscussionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchDiscussionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchDiscussionResponseValidationError) ErrorName() string {
	return "PatchDiscussionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PatchDiscussionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchDiscussionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchDiscussionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchDiscussionResponseValidationError{}

// Validate checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentResponseMultiError, or nil if none found.
func (m *CreateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCommentResponseMultiError(errors)
	}

	return nil
}

// CreateCommentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentResponseMultiError) AllErrors() []error { return m }

// CreateCommentResponseValidationError is the validation error returned by
// CreateCommentResponse.Validate if the designated constraints aren't met.
type CreateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentResponseValidationError) ErrorName() string {
	return "CreateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentResponseValidationError{}

// Validate checks the field values on GetAllCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCommentsRequestMultiError, or nil if none found.
func (m *GetAllCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	if m.GetSort() != "" {

	}

	if m.GetDirection() != "" {

	}

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetAllCommentsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetAllCommentsRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAllCommentsRequestMultiError(errors)
	}

	return nil
}

// GetAllCommentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllCommentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCommentsRequestMultiError) AllErrors() []error { return m }

// GetAllCommentsRequestValidationError is the validation error returned by
// GetAllCommentsRequest.Validate if the designated constraints aren't met.
type GetAllCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCommentsRequestValidationError) ErrorName() string {
	return "GetAllCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCommentsRequestValidationError{}

// Validate checks the field values on GetAllCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCommentsResponseMultiError, or nil if none found.
func (m *GetAllCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllCommentsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllCommentsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllCommentsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllCommentsResponseMultiError(errors)
	}

	return nil
}

// GetAllCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCommentsResponseMultiError) AllErrors() []error { return m }

// GetAllCommentsResponseValidationError is the validation error returned by
// GetAllCommentsResponse.Validate if the designated constraints aren't met.
type GetAllCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCommentsResponseValidationError) ErrorName() string {
	return "GetAllCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCommentsResponseValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRequestMultiError, or nil if none found.
func (m *GetCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCommentRequestMultiError(errors)
	}

	return nil
}

// GetCommentRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRequestMultiError) AllErrors() []error { return m }

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on GetCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentResponseMultiError, or nil if none found.
func (m *GetCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommentResponseMultiError(errors)
	}

	return nil
}

// GetCommentResponseMultiError is an error wrapping multiple validation errors
// returned by GetCommentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentResponseMultiError) AllErrors() []error { return m }

// GetCommentResponseValidationError is the validation error returned by
// GetCommentResponse.Validate if the designated constraints aren't met.
type GetCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentResponseValidationError) ErrorName() string {
	return "GetCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentResponseValidationError{}

// Validate checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentRequestMultiError, or nil if none found.
func (m *UpdateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		err := UpdateCommentRequestValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCommentRequestMultiError(errors)
	}

	return nil
}

// UpdateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentRequestMultiError) AllErrors() []error { return m }

// UpdateCommentRequestValidationError is the validation error returned by
// UpdateCommentRequest.Validate if the designated constraints aren't met.
type UpdateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentRequestValidationError) ErrorName() string {
	return "UpdateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentRequestValidationError{}

// Validate checks the field values on UpdateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentResponseMultiError, or nil if none found.
func (m *UpdateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCommentResponseMultiError(errors)
	}

	return nil
}

// UpdateCommentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentResponseMultiError) AllErrors() []error { return m }

// UpdateCommentResponseValidationError is the validation error returned by
// UpdateCommentResponse.Validate if the designated constraints aren't met.
type UpdateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentResponseValidationError) ErrorName() string {
	return "UpdateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentResponseValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentResponseMultiError, or nil if none found.
func (m *DeleteCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteCommentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentResponseMultiError) AllErrors() []error { return m }

// DeleteCommentResponseValidationError is the validation error returned by
// DeleteCommentResponse.Validate if the designated constraints aren't met.
type DeleteCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentResponseValidationError) ErrorName() string {
	return "DeleteCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentResponseValidationError{}

// Validate checks the field values on SearchAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAssetsRequestMultiError, or nil if none found.
func (m *SearchAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetText() != "" {

	}

	if m.GetRankby() != "" {

	}

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := SearchAssetsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for Filter

	// no validation rules for Query

	if len(errors) > 0 {
		return SearchAssetsRequestMultiError(errors)
	}

	return nil
}

// SearchAssetsRequestMultiError is an error wrapping multiple validation
// errors returned by SearchAssetsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAssetsRequestMultiError) AllErrors() []error { return m }

// SearchAssetsRequestValidationError is the validation error returned by
// SearchAssetsRequest.Validate if the designated constraints aren't met.
type SearchAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAssetsRequestValidationError) ErrorName() string {
	return "SearchAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAssetsRequestValidationError{}

// Validate checks the field values on SearchAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchAssetsResponseMultiError, or nil if none found.
func (m *SearchAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchAssetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchAssetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchAssetsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchAssetsResponseMultiError(errors)
	}

	return nil
}

// SearchAssetsResponseMultiError is an error wrapping multiple validation
// errors returned by SearchAssetsResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchAssetsResponseMultiError) AllErrors() []error { return m }

// SearchAssetsResponseValidationError is the validation error returned by
// SearchAssetsResponse.Validate if the designated constraints aren't met.
type SearchAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchAssetsResponseValidationError) ErrorName() string {
	return "SearchAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchAssetsResponseValidationError{}

// Validate checks the field values on SuggestAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestAssetsRequestMultiError, or nil if none found.
func (m *SuggestAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetText() != "" {

	}

	if len(errors) > 0 {
		return SuggestAssetsRequestMultiError(errors)
	}

	return nil
}

// SuggestAssetsRequestMultiError is an error wrapping multiple validation
// errors returned by SuggestAssetsRequest.ValidateAll() if the designated
// constraints aren't met.
type SuggestAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestAssetsRequestMultiError) AllErrors() []error { return m }

// SuggestAssetsRequestValidationError is the validation error returned by
// SuggestAssetsRequest.Validate if the designated constraints aren't met.
type SuggestAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestAssetsRequestValidationError) ErrorName() string {
	return "SuggestAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestAssetsRequestValidationError{}

// Validate checks the field values on SuggestAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SuggestAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SuggestAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SuggestAssetsResponseMultiError, or nil if none found.
func (m *SuggestAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SuggestAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SuggestAssetsResponseMultiError(errors)
	}

	return nil
}

// SuggestAssetsResponseMultiError is an error wrapping multiple validation
// errors returned by SuggestAssetsResponse.ValidateAll() if the designated
// constraints aren't met.
type SuggestAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SuggestAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SuggestAssetsResponseMultiError) AllErrors() []error { return m }

// SuggestAssetsResponseValidationError is the validation error returned by
// SuggestAssetsResponse.Validate if the designated constraints aren't met.
type SuggestAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuggestAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuggestAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuggestAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuggestAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuggestAssetsResponseValidationError) ErrorName() string {
	return "SuggestAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SuggestAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuggestAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuggestAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuggestAssetsResponseValidationError{}

// Validate checks the field values on GetGraphRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGraphRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGraphRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGraphRequestMultiError, or nil if none found.
func (m *GetGraphRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGraphRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for Level

	if _, ok := _GetGraphRequest_Direction_InLookup[m.GetDirection()]; !ok {
		err := GetGraphRequestValidationError{
			field:  "Direction",
			reason: "value must be in list [upstream downstream ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGraphRequestMultiError(errors)
	}

	return nil
}

// GetGraphRequestMultiError is an error wrapping multiple validation errors
// returned by GetGraphRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGraphRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGraphRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGraphRequestMultiError) AllErrors() []error { return m }

// GetGraphRequestValidationError is the validation error returned by
// GetGraphRequest.Validate if the designated constraints aren't met.
type GetGraphRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGraphRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGraphRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGraphRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGraphRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGraphRequestValidationError) ErrorName() string { return "GetGraphRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGraphRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGraphRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGraphRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGraphRequestValidationError{}

var _GetGraphRequest_Direction_InLookup = map[string]struct{}{
	"upstream":   {},
	"downstream": {},
	"":           {},
}

// Validate checks the field values on GetGraphResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGraphResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGraphResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGraphResponseMultiError, or nil if none found.
func (m *GetGraphResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGraphResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGraphResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGraphResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGraphResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	{
		sorted_keys := make([]string, len(m.GetNodeAttrs()))
		i := 0
		for key := range m.GetNodeAttrs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetNodeAttrs()[key]
			_ = val

			// no validation rules for NodeAttrs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetGraphResponseValidationError{
							field:  fmt.Sprintf("NodeAttrs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetGraphResponseValidationError{
							field:  fmt.Sprintf("NodeAttrs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetGraphResponseValidationError{
						field:  fmt.Sprintf("NodeAttrs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetGraphResponseMultiError(errors)
	}

	return nil
}

// GetGraphResponseMultiError is an error wrapping multiple validation errors
// returned by GetGraphResponse.ValidateAll() if the designated constraints
// aren't met.
type GetGraphResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGraphResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGraphResponseMultiError) AllErrors() []error { return m }

// GetGraphResponseValidationError is the validation error returned by
// GetGraphResponse.Validate if the designated constraints aren't met.
type GetGraphResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGraphResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGraphResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGraphResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGraphResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGraphResponseValidationError) ErrorName() string { return "GetGraphResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGraphResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGraphResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGraphResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGraphResponseValidationError{}

// Validate checks the field values on GetAllTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllTypesRequestMultiError, or nil if none found.
func (m *GetAllTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQ() != "" {

	}

	if m.GetQFields() != "" {

	}

	if m.GetTypes() != "" {

	}

	if m.GetServices() != "" {

	}

	// no validation rules for Data

	if len(errors) > 0 {
		return GetAllTypesRequestMultiError(errors)
	}

	return nil
}

// GetAllTypesRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllTypesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllTypesRequestMultiError) AllErrors() []error { return m }

// GetAllTypesRequestValidationError is the validation error returned by
// GetAllTypesRequest.Validate if the designated constraints aren't met.
type GetAllTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTypesRequestValidationError) ErrorName() string {
	return "GetAllTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTypesRequestValidationError{}

// Validate checks the field values on GetAllTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllTypesResponseMultiError, or nil if none found.
func (m *GetAllTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllTypesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllTypesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllTypesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllTypesResponseMultiError(errors)
	}

	return nil
}

// GetAllTypesResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllTypesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllTypesResponseMultiError) AllErrors() []error { return m }

// GetAllTypesResponseValidationError is the validation error returned by
// GetAllTypesResponse.Validate if the designated constraints aren't met.
type GetAllTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTypesResponseValidationError) ErrorName() string {
	return "GetAllTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTypesResponseValidationError{}

// Validate checks the field values on GetAllAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllAssetsRequestMultiError, or nil if none found.
func (m *GetAllAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQ() != "" {

	}

	if m.GetQFields() != "" {

	}

	if m.GetTypes() != "" {

	}

	if m.GetServices() != "" {

	}

	if m.GetSort() != "" {

	}

	if m.GetDirection() != "" {

	}

	// no validation rules for Data

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetAllAssetsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetAllAssetsRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for WithTotal

	if len(errors) > 0 {
		return GetAllAssetsRequestMultiError(errors)
	}

	return nil
}

// GetAllAssetsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllAssetsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllAssetsRequestMultiError) AllErrors() []error { return m }

// GetAllAssetsRequestValidationError is the validation error returned by
// GetAllAssetsRequest.Validate if the designated constraints aren't met.
type GetAllAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllAssetsRequestValidationError) ErrorName() string {
	return "GetAllAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllAssetsRequestValidationError{}

// Validate checks the field values on GetAllAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllAssetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllAssetsResponseMultiError, or nil if none found.
func (m *GetAllAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllAssetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllAssetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllAssetsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetAllAssetsResponseMultiError(errors)
	}

	return nil
}

// GetAllAssetsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllAssetsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllAssetsResponseMultiError) AllErrors() []error { return m }

// GetAllAssetsResponseValidationError is the validation error returned by
// GetAllAssetsResponse.Validate if the designated constraints aren't met.
type GetAllAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllAssetsResponseValidationError) ErrorName() string {
	return "GetAllAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllAssetsResponseValidationError{}

// Validate checks the field values on GetAssetByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetByIDRequestMultiError, or nil if none found.
func (m *GetAssetByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAssetByIDRequestMultiError(errors)
	}

	return nil
}

// GetAssetByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetAssetByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAssetByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetByIDRequestMultiError) AllErrors() []error { return m }

// GetAssetByIDRequestValidationError is the validation error returned by
// GetAssetByIDRequest.Validate if the designated constraints aren't met.
type GetAssetByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetByIDRequestValidationError) ErrorName() string {
	return "GetAssetByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetByIDRequestValidationError{}

// Validate checks the field values on GetAssetByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetByIDResponseMultiError, or nil if none found.
func (m *GetAssetByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAssetByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAssetByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAssetByIDResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAssetByIDResponseMultiError(errors)
	}

	return nil
}

// GetAssetByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetAssetByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAssetByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetByIDResponseMultiError) AllErrors() []error { return m }

// GetAssetByIDResponseValidationError is the validation error returned by
// GetAssetByIDResponse.Validate if the designated constraints aren't met.
type GetAssetByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetByIDResponseValidationError) ErrorName() string {
	return "GetAssetByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetByIDResponseValidationError{}

// Validate checks the field values on UpsertAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertAssetRequestMultiError, or nil if none found.
func (m *UpsertAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertAssetRequestValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUpstreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertAssetRequestValidationError{
						field:  fmt.Sprintf("Upstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertAssetRequestValidationError{
						field:  fmt.Sprintf("Upstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertAssetRequestValidationError{
					field:  fmt.Sprintf("Upstreams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDownstreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertAssetRequestValidationError{
						field:  fmt.Sprintf("Downstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertAssetRequestValidationError{
						field:  fmt.Sprintf("Downstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertAssetRequestValidationError{
					field:  fmt.Sprintf("Downstreams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertAssetRequestMultiError(errors)
	}

	return nil
}

// UpsertAssetRequestMultiError is an error wrapping multiple validation errors
// returned by UpsertAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type UpsertAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAssetRequestMultiError) AllErrors() []error { return m }

// UpsertAssetRequestValidationError is the validation error returned by
// UpsertAssetRequest.Validate if the designated constraints aren't met.
type UpsertAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAssetRequestValidationError) ErrorName() string {
	return "UpsertAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAssetRequestValidationError{}

// Validate checks the field values on UpsertAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertAssetResponseMultiError, or nil if none found.
func (m *UpsertAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpsertAssetResponseMultiError(errors)
	}

	return nil
}

// UpsertAssetResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertAssetResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAssetResponseMultiError) AllErrors() []error { return m }

// UpsertAssetResponseValidationError is the validation error returned by
// UpsertAssetResponse.Validate if the designated constraints aren't met.
type UpsertAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAssetResponseValidationError) ErrorName() string {
	return "UpsertAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAssetResponseValidationError{}

// Validate checks the field values on UpsertPatchAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertPatchAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertPatchAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertPatchAssetRequestMultiError, or nil if none found.
func (m *UpsertPatchAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertPatchAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAsset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertPatchAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertPatchAssetRequestValidationError{
					field:  "Asset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAsset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertPatchAssetRequestValidationError{
				field:  "Asset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUpstreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertPatchAssetRequestValidationError{
						field:  fmt.Sprintf("Upstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertPatchAssetRequestValidationError{
						field:  fmt.Sprintf("Upstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertPatchAssetRequestValidationError{
					field:  fmt.Sprintf("Upstreams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDownstreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertPatchAssetRequestValidationError{
						field:  fmt.Sprintf("Downstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertPatchAssetRequestValidationError{
						field:  fmt.Sprintf("Downstreams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertPatchAssetRequestValidationError{
					field:  fmt.Sprintf("Downstreams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertPatchAssetRequestMultiError(errors)
	}

	return nil
}

// UpsertPatchAssetRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertPatchAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertPatchAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertPatchAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertPatchAssetRequestMultiError) AllErrors() []error { return m }

// UpsertPatchAssetRequestValidationError is the validation error returned by
// UpsertPatchAssetRequest.Validate if the designated constraints aren't met.
type UpsertPatchAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertPatchAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertPatchAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertPatchAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertPatchAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertPatchAssetRequestValidationError) ErrorName() string {
	return "UpsertPatchAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertPatchAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertPatchAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertPatchAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertPatchAssetRequestValidationError{}

// Validate checks the field values on UpsertPatchAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertPatchAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertPatchAssetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertPatchAssetResponseMultiError, or nil if none found.
func (m *UpsertPatchAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertPatchAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpsertPatchAssetResponseMultiError(errors)
	}

	return nil
}

// UpsertPatchAssetResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertPatchAssetResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertPatchAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertPatchAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertPatchAssetResponseMultiError) AllErrors() []error { return m }

// UpsertPatchAssetResponseValidationError is the validation error returned by
// UpsertPatchAssetResponse.Validate if the designated constraints aren't met.
type UpsertPatchAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertPatchAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertPatchAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertPatchAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertPatchAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertPatchAssetResponseValidationError) ErrorName() string {
	return "UpsertPatchAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertPatchAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertPatchAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertPatchAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertPatchAssetResponseValidationError{}

// Validate checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssetRequestMultiError, or nil if none found.
func (m *DeleteAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAssetRequestMultiError(errors)
	}

	return nil
}

// DeleteAssetRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssetRequestMultiError) AllErrors() []error { return m }

// DeleteAssetRequestValidationError is the validation error returned by
// DeleteAssetRequest.Validate if the designated constraints aren't met.
type DeleteAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetRequestValidationError) ErrorName() string {
	return "DeleteAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetRequestValidationError{}

// Validate checks the field values on DeleteAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssetResponseMultiError, or nil if none found.
func (m *DeleteAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAssetResponseMultiError(errors)
	}

	return nil
}

// DeleteAssetResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAssetResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssetResponseMultiError) AllErrors() []error { return m }

// DeleteAssetResponseValidationError is the validation error returned by
// DeleteAssetResponse.Validate if the designated constraints aren't met.
type DeleteAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetResponseValidationError) ErrorName() string {
	return "DeleteAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetResponseValidationError{}

// Validate checks the field values on GetAssetStargazersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetStargazersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetStargazersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetStargazersRequestMultiError, or nil if none found.
func (m *GetAssetStargazersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetStargazersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetAssetStargazersRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetAssetStargazersRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAssetStargazersRequestMultiError(errors)
	}

	return nil
}

// GetAssetStargazersRequestMultiError is an error wrapping multiple validation
// errors returned by GetAssetStargazersRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAssetStargazersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetStargazersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetStargazersRequestMultiError) AllErrors() []error { return m }

// GetAssetStargazersRequestValidationError is the validation error returned by
// GetAssetStargazersRequest.Validate if the designated constraints aren't met.
type GetAssetStargazersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetStargazersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetStargazersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetStargazersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetStargazersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetStargazersRequestValidationError) ErrorName() string {
	return "GetAssetStargazersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetStargazersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetStargazersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetStargazersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetStargazersRequestValidationError{}

// Validate checks the field values on GetAssetStargazersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetStargazersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetStargazersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetStargazersResponseMultiError, or nil if none found.
func (m *GetAssetStargazersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetStargazersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetStargazersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetStargazersResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetStargazersResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAssetStargazersResponseMultiError(errors)
	}

	return nil
}

// GetAssetStargazersResponseMultiError is an error wrapping multiple
// validation errors returned by GetAssetStargazersResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAssetStargazersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetStargazersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetStargazersResponseMultiError) AllErrors() []error { return m }

// GetAssetStargazersResponseValidationError is the validation error returned
// by GetAssetStargazersResponse.Validate if the designated constraints aren't met.
type GetAssetStargazersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetStargazersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetStargazersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetStargazersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetStargazersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetStargazersResponseValidationError) ErrorName() string {
	return "GetAssetStargazersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetStargazersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetStargazersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetStargazersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetStargazersResponseValidationError{}

// Validate checks the field values on GetAssetVersionHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetVersionHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetVersionHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAssetVersionHistoryRequestMultiError, or nil if none found.
func (m *GetAssetVersionHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetVersionHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetAssetVersionHistoryRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetAssetVersionHistoryRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAssetVersionHistoryRequestMultiError(errors)
	}

	return nil
}

// GetAssetVersionHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by GetAssetVersionHistoryRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAssetVersionHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetVersionHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetVersionHistoryRequestMultiError) AllErrors() []error { return m }

// GetAssetVersionHistoryRequestValidationError is the validation error
// returned by GetAssetVersionHistoryRequest.Validate if the designated
// constraints aren't met.
type GetAssetVersionHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetVersionHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetVersionHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetVersionHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetVersionHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetVersionHistoryRequestValidationError) ErrorName() string {
	return "GetAssetVersionHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetVersionHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetVersionHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetVersionHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetVersionHistoryRequestValidationError{}

// Validate checks the field values on GetAssetVersionHistoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetVersionHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetVersionHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAssetVersionHistoryResponseMultiError, or nil if none found.
func (m *GetAssetVersionHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetVersionHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAssetVersionHistoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAssetVersionHistoryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAssetVersionHistoryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAssetVersionHistoryResponseMultiError(errors)
	}

	return nil
}

// GetAssetVersionHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by GetAssetVersionHistoryResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAssetVersionHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetVersionHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetVersionHistoryResponseMultiError) AllErrors() []error { return m }

// GetAssetVersionHistoryResponseValidationError is the validation error
// returned by GetAssetVersionHistoryResponse.Validate if the designated
// constraints aren't met.
type GetAssetVersionHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetVersionHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetVersionHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetVersionHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetVersionHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetVersionHistoryResponseValidationError) ErrorName() string {
	return "GetAssetVersionHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetVersionHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetVersionHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetVersionHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetVersionHistoryResponseValidationError{}

// Validate checks the field values on GetAssetByVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetByVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetByVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetByVersionRequestMultiError, or nil if none found.
func (m *GetAssetByVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetByVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Version

	if len(errors) > 0 {
		return GetAssetByVersionRequestMultiError(errors)
	}

	return nil
}

// GetAssetByVersionRequestMultiError is an error wrapping multiple validation
// errors returned by GetAssetByVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAssetByVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetByVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetByVersionRequestMultiError) AllErrors() []error { return m }

// GetAssetByVersionRequestValidationError is the validation error returned by
// GetAssetByVersionRequest.Validate if the designated constraints aren't met.
type GetAssetByVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetByVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetByVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetByVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetByVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetByVersionRequestValidationError) ErrorName() string {
	return "GetAssetByVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetByVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetByVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetByVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetByVersionRequestValidationError{}

// Validate checks the field values on GetAssetByVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssetByVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetByVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetByVersionResponseMultiError, or nil if none found.
func (m *GetAssetByVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetByVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAssetByVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAssetByVersionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAssetByVersionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAssetByVersionResponseMultiError(errors)
	}

	return nil
}

// GetAssetByVersionResponseMultiError is an error wrapping multiple validation
// errors returned by GetAssetByVersionResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAssetByVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetByVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetByVersionResponseMultiError) AllErrors() []error { return m }

// GetAssetByVersionResponseValidationError is the validation error returned by
// GetAssetByVersionResponse.Validate if the designated constraints aren't met.
type GetAssetByVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetByVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetByVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetByVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetByVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetByVersionResponseValidationError) ErrorName() string {
	return "GetAssetByVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssetByVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetByVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetByVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetByVersionResponseValidationError{}

// Validate checks the field values on CreateAssetProbeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssetProbeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssetProbeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssetProbeRequestMultiError, or nil if none found.
func (m *CreateAssetProbeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssetProbeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAssetUrn()) < 1 {
		err := CreateAssetProbeRequestValidationError{
			field:  "AssetUrn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProbe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAssetProbeRequestValidationError{
					field:  "Probe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAssetProbeRequestValidationError{
					field:  "Probe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProbe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssetProbeRequestValidationError{
				field:  "Probe",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAssetProbeRequestMultiError(errors)
	}

	return nil
}

// CreateAssetProbeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAssetProbeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAssetProbeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssetProbeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssetProbeRequestMultiError) AllErrors() []error { return m }

// CreateAssetProbeRequestValidationError is the validation error returned by
// CreateAssetProbeRequest.Validate if the designated constraints aren't met.
type CreateAssetProbeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetProbeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetProbeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetProbeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetProbeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetProbeRequestValidationError) ErrorName() string {
	return "CreateAssetProbeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetProbeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetProbeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetProbeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetProbeRequestValidationError{}

// Validate checks the field values on CreateAssetProbeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssetProbeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssetProbeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssetProbeResponseMultiError, or nil if none found.
func (m *CreateAssetProbeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssetProbeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAssetProbeResponseMultiError(errors)
	}

	return nil
}

// CreateAssetProbeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAssetProbeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAssetProbeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssetProbeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssetProbeResponseMultiError) AllErrors() []error { return m }

// CreateAssetProbeResponseValidationError is the validation error returned by
// CreateAssetProbeResponse.Validate if the designated constraints aren't met.
type CreateAssetProbeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetProbeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetProbeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetProbeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetProbeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetProbeResponseValidationError) ErrorName() string {
	return "CreateAssetProbeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetProbeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetProbeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetProbeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetProbeResponseValidationError{}

// Validate checks the field values on GetUserStarredAssetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserStarredAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserStarredAssetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserStarredAssetsRequestMultiError, or nil if none found.
func (m *GetUserStarredAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserStarredAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetUserStarredAssetsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetUserStarredAssetsRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetUserStarredAssetsRequestMultiError(errors)
	}

	return nil
}

// GetUserStarredAssetsRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserStarredAssetsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserStarredAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserStarredAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserStarredAssetsRequestMultiError) AllErrors() []error { return m }

// GetUserStarredAssetsRequestValidationError is the validation error returned
// by GetUserStarredAssetsRequest.Validate if the designated constraints
// aren't met.
type GetUserStarredAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserStarredAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserStarredAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserStarredAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserStarredAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserStarredAssetsRequestValidationError) ErrorName() string {
	return "GetUserStarredAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserStarredAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserStarredAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserStarredAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserStarredAssetsRequestValidationError{}

// Validate checks the field values on GetUserStarredAssetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserStarredAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserStarredAssetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserStarredAssetsResponseMultiError, or nil if none found.
func (m *GetUserStarredAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserStarredAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserStarredAssetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserStarredAssetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserStarredAssetsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserStarredAssetsResponseMultiError(errors)
	}

	return nil
}

// GetUserStarredAssetsResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserStarredAssetsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUserStarredAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserStarredAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserStarredAssetsResponseMultiError) AllErrors() []error { return m }

// GetUserStarredAssetsResponseValidationError is the validation error returned
// by GetUserStarredAssetsResponse.Validate if the designated constraints
// aren't met.
type GetUserStarredAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserStarredAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserStarredAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserStarredAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserStarredAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserStarredAssetsResponseValidationError) ErrorName() string {
	return "GetUserStarredAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserStarredAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserStarredAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserStarredAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserStarredAssetsResponseValidationError{}

// Validate checks the field values on GetMyStarredAssetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyStarredAssetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyStarredAssetsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyStarredAssetsRequestMultiError, or nil if none found.
func (m *GetMyStarredAssetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyStarredAssetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetMyStarredAssetsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetMyStarredAssetsRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetMyStarredAssetsRequestMultiError(errors)
	}

	return nil
}

// GetMyStarredAssetsRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyStarredAssetsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMyStarredAssetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyStarredAssetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyStarredAssetsRequestMultiError) AllErrors() []error { return m }

// GetMyStarredAssetsRequestValidationError is the validation error returned by
// GetMyStarredAssetsRequest.Validate if the designated constraints aren't met.
type GetMyStarredAssetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyStarredAssetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyStarredAssetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyStarredAssetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyStarredAssetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyStarredAssetsRequestValidationError) ErrorName() string {
	return "GetMyStarredAssetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyStarredAssetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyStarredAssetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyStarredAssetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyStarredAssetsRequestValidationError{}

// Validate checks the field values on GetMyStarredAssetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyStarredAssetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyStarredAssetsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyStarredAssetsResponseMultiError, or nil if none found.
func (m *GetMyStarredAssetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyStarredAssetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyStarredAssetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyStarredAssetsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyStarredAssetsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMyStarredAssetsResponseMultiError(errors)
	}

	return nil
}

// GetMyStarredAssetsResponseMultiError is an error wrapping multiple
// validation errors returned by GetMyStarredAssetsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMyStarredAssetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyStarredAssetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyStarredAssetsResponseMultiError) AllErrors() []error { return m }

// GetMyStarredAssetsResponseValidationError is the validation error returned
// by GetMyStarredAssetsResponse.Validate if the designated constraints aren't met.
type GetMyStarredAssetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyStarredAssetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyStarredAssetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyStarredAssetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyStarredAssetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyStarredAssetsResponseValidationError) ErrorName() string {
	return "GetMyStarredAssetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyStarredAssetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyStarredAssetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyStarredAssetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyStarredAssetsResponseValidationError{}

// Validate checks the field values on GetMyStarredAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyStarredAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyStarredAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyStarredAssetRequestMultiError, or nil if none found.
func (m *GetMyStarredAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyStarredAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return GetMyStarredAssetRequestMultiError(errors)
	}

	return nil
}

// GetMyStarredAssetRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyStarredAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMyStarredAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyStarredAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyStarredAssetRequestMultiError) AllErrors() []error { return m }

// GetMyStarredAssetRequestValidationError is the validation error returned by
// GetMyStarredAssetRequest.Validate if the designated constraints aren't met.
type GetMyStarredAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyStarredAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyStarredAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyStarredAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyStarredAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyStarredAssetRequestValidationError) ErrorName() string {
	return "GetMyStarredAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyStarredAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyStarredAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyStarredAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyStarredAssetRequestValidationError{}

// Validate checks the field values on GetMyStarredAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyStarredAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyStarredAssetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyStarredAssetResponseMultiError, or nil if none found.
func (m *GetMyStarredAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyStarredAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMyStarredAssetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMyStarredAssetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyStarredAssetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMyStarredAssetResponseMultiError(errors)
	}

	return nil
}

// GetMyStarredAssetResponseMultiError is an error wrapping multiple validation
// errors returned by GetMyStarredAssetResponse.ValidateAll() if the
// designated constraints aren't met.
type GetMyStarredAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyStarredAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyStarredAssetResponseMultiError) AllErrors() []error { return m }

// GetMyStarredAssetResponseValidationError is the validation error returned by
// GetMyStarredAssetResponse.Validate if the designated constraints aren't met.
type GetMyStarredAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyStarredAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyStarredAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyStarredAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyStarredAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyStarredAssetResponseValidationError) ErrorName() string {
	return "GetMyStarredAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyStarredAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyStarredAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyStarredAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyStarredAssetResponseValidationError{}

// Validate checks the field values on StarAssetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StarAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StarAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StarAssetRequestMultiError, or nil if none found.
func (m *StarAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StarAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return StarAssetRequestMultiError(errors)
	}

	return nil
}

// StarAssetRequestMultiError is an error wrapping multiple validation errors
// returned by StarAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type StarAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StarAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StarAssetRequestMultiError) AllErrors() []error { return m }

// StarAssetRequestValidationError is the validation error returned by
// StarAssetRequest.Validate if the designated constraints aren't met.
type StarAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarAssetRequestValidationError) ErrorName() string { return "StarAssetRequestValidationError" }

// Error satisfies the builtin error interface
func (e StarAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarAssetRequestValidationError{}

// Validate checks the field values on StarAssetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StarAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StarAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StarAssetResponseMultiError, or nil if none found.
func (m *StarAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StarAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return StarAssetResponseMultiError(errors)
	}

	return nil
}

// StarAssetResponseMultiError is an error wrapping multiple validation errors
// returned by StarAssetResponse.ValidateAll() if the designated constraints
// aren't met.
type StarAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StarAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StarAssetResponseMultiError) AllErrors() []error { return m }

// StarAssetResponseValidationError is the validation error returned by
// StarAssetResponse.Validate if the designated constraints aren't met.
type StarAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarAssetResponseValidationError) ErrorName() string {
	return "StarAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StarAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarAssetResponseValidationError{}

// Validate checks the field values on UnstarAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnstarAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnstarAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnstarAssetRequestMultiError, or nil if none found.
func (m *UnstarAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnstarAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return UnstarAssetRequestMultiError(errors)
	}

	return nil
}

// UnstarAssetRequestMultiError is an error wrapping multiple validation errors
// returned by UnstarAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type UnstarAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnstarAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnstarAssetRequestMultiError) AllErrors() []error { return m }

// UnstarAssetRequestValidationError is the validation error returned by
// UnstarAssetRequest.Validate if the designated constraints aren't met.
type UnstarAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnstarAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnstarAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnstarAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnstarAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnstarAssetRequestValidationError) ErrorName() string {
	return "UnstarAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnstarAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnstarAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnstarAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnstarAssetRequestValidationError{}

// Validate checks the field values on UnstarAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnstarAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnstarAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnstarAssetResponseMultiError, or nil if none found.
func (m *UnstarAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnstarAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnstarAssetResponseMultiError(errors)
	}

	return nil
}

// UnstarAssetResponseMultiError is an error wrapping multiple validation
// errors returned by UnstarAssetResponse.ValidateAll() if the designated
// constraints aren't met.
type UnstarAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnstarAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnstarAssetResponseMultiError) AllErrors() []error { return m }

// UnstarAssetResponseValidationError is the validation error returned by
// UnstarAssetResponse.Validate if the designated constraints aren't met.
type UnstarAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnstarAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnstarAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnstarAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnstarAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnstarAssetResponseValidationError) ErrorName() string {
	return "UnstarAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnstarAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnstarAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnstarAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnstarAssetResponseValidationError{}

// Validate checks the field values on GetMyDiscussionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyDiscussionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyDiscussionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyDiscussionsRequestMultiError, or nil if none found.
func (m *GetMyDiscussionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyDiscussionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFilter() != "" {

	}

	if m.GetType() != "" {

	}

	if m.GetState() != "" {

	}

	if m.GetAsset() != "" {

	}

	if m.GetLabels() != "" {

	}

	if m.GetSort() != "" {

	}

	if m.GetDirection() != "" {

	}

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetMyDiscussionsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetMyDiscussionsRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetMyDiscussionsRequestMultiError(errors)
	}

	return nil
}

// GetMyDiscussionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetMyDiscussionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMyDiscussionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyDiscussionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyDiscussionsRequestMultiError) AllErrors() []error { return m }

// GetMyDiscussionsRequestValidationError is the validation error returned by
// GetMyDiscussionsRequest.Validate if the designated constraints aren't met.
type GetMyDiscussionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyDiscussionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyDiscussionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyDiscussionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyDiscussionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyDiscussionsRequestValidationError) ErrorName() string {
	return "GetMyDiscussionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyDiscussionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyDiscussionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyDiscussionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyDiscussionsRequestValidationError{}

// Validate checks the field values on GetMyDiscussionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMyDiscussionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMyDiscussionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMyDiscussionsResponseMultiError, or nil if none found.
func (m *GetMyDiscussionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMyDiscussionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMyDiscussionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMyDiscussionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMyDiscussionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMyDiscussionsResponseMultiError(errors)
	}

	return nil
}

// GetMyDiscussionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetMyDiscussionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMyDiscussionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMyDiscussionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMyDiscussionsResponseMultiError) AllErrors() []error { return m }

// GetMyDiscussionsResponseValidationError is the validation error returned by
// GetMyDiscussionsResponse.Validate if the designated constraints aren't met.
type GetMyDiscussionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyDiscussionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyDiscussionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyDiscussionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyDiscussionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyDiscussionsResponseValidationError) ErrorName() string {
	return "GetMyDiscussionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyDiscussionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyDiscussionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyDiscussionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyDiscussionsResponseValidationError{}

// Validate checks the field values on CreateTagAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTagAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTagAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTagAssetRequestMultiError, or nil if none found.
func (m *CreateTagAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTagAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	// no validation rules for TemplateUrn

	for idx, item := range m.GetTagValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTagAssetRequestValidationError{
						field:  fmt.Sprintf("TagValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTagAssetRequestValidationError{
						field:  fmt.Sprintf("TagValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTagAssetRequestValidationError{
					field:  fmt.Sprintf("TagValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TemplateDisplayName

	// no validation rules for TemplateDescription

	if len(errors) > 0 {
		return CreateTagAssetRequestMultiError(errors)
	}

	return nil
}

// CreateTagAssetRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTagAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTagAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTagAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTagAssetRequestMultiError) AllErrors() []error { return m }

// CreateTagAssetRequestValidationError is the validation error returned by
// CreateTagAssetRequest.Validate if the designated constraints aren't met.
type CreateTagAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagAssetRequestValidationError) ErrorName() string {
	return "CreateTagAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTagAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagAssetRequestValidationError{}

// Validate checks the field values on CreateTagAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTagAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTagAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTagAssetResponseMultiError, or nil if none found.
func (m *CreateTagAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTagAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTagAssetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTagAssetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTagAssetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTagAssetResponseMultiError(errors)
	}

	return nil
}

// CreateTagAssetResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTagAssetResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTagAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTagAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTagAssetResponseMultiError) AllErrors() []error { return m }

// CreateTagAssetResponseValidationError is the validation error returned by
// CreateTagAssetResponse.Validate if the designated constraints aren't met.
type CreateTagAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagAssetResponseValidationError) ErrorName() string {
	return "CreateTagAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTagAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagAssetResponseValidationError{}

// Validate checks the field values on GetTagByAssetAndTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTagByAssetAndTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagByAssetAndTemplateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTagByAssetAndTemplateRequestMultiError, or nil if none found.
func (m *GetTagByAssetAndTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagByAssetAndTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	// no validation rules for TemplateUrn

	if len(errors) > 0 {
		return GetTagByAssetAndTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTagByAssetAndTemplateRequestMultiError is an error wrapping multiple
// validation errors returned by GetTagByAssetAndTemplateRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTagByAssetAndTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagByAssetAndTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagByAssetAndTemplateRequestMultiError) AllErrors() []error { return m }

// GetTagByAssetAndTemplateRequestValidationError is the validation error
// returned by GetTagByAssetAndTemplateRequest.Validate if the designated
// constraints aren't met.
type GetTagByAssetAndTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagByAssetAndTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagByAssetAndTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagByAssetAndTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagByAssetAndTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagByAssetAndTemplateRequestValidationError) ErrorName() string {
	return "GetTagByAssetAndTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTagByAssetAndTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagByAssetAndTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagByAssetAndTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagByAssetAndTemplateRequestValidationError{}

// Validate checks the field values on GetTagByAssetAndTemplateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTagByAssetAndTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagByAssetAndTemplateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTagByAssetAndTemplateResponseMultiError, or nil if none found.
func (m *GetTagByAssetAndTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagByAssetAndTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTagByAssetAndTemplateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTagByAssetAndTemplateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTagByAssetAndTemplateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTagByAssetAndTemplateResponseMultiError(errors)
	}

	return nil
}

// GetTagByAssetAndTemplateResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTagByAssetAndTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTagByAssetAndTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagByAssetAndTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagByAssetAndTemplateResponseMultiError) AllErrors() []error { return m }

// GetTagByAssetAndTemplateResponseValidationError is the validation error
// returned by GetTagByAssetAndTemplateResponse.Validate if the designated
// constraints aren't met.
type GetTagByAssetAndTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagByAssetAndTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagByAssetAndTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagByAssetAndTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagByAssetAndTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagByAssetAndTemplateResponseValidationError) ErrorName() string {
	return "GetTagByAssetAndTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTagByAssetAndTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagByAssetAndTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagByAssetAndTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagByAssetAndTemplateResponseValidationError{}

// Validate checks the field values on UpdateTagAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTagAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTagAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTagAssetRequestMultiError, or nil if none found.
func (m *UpdateTagAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTagAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	// no validation rules for TemplateUrn

	for idx, item := range m.GetTagValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTagAssetRequestValidationError{
						field:  fmt.Sprintf("TagValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTagAssetRequestValidationError{
						field:  fmt.Sprintf("TagValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTagAssetRequestValidationError{
					field:  fmt.Sprintf("TagValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TemplateDisplayName

	// no validation rules for TemplateDescription

	if len(errors) > 0 {
		return UpdateTagAssetRequestMultiError(errors)
	}

	return nil
}

// UpdateTagAssetRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTagAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTagAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTagAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTagAssetRequestMultiError) AllErrors() []error { return m }

// UpdateTagAssetRequestValidationError is the validation error returned by
// UpdateTagAssetRequest.Validate if the designated constraints aren't met.
type UpdateTagAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagAssetRequestValidationError) ErrorName() string {
	return "UpdateTagAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTagAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagAssetRequestValidationError{}

// Validate checks the field values on UpdateTagAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTagAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTagAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTagAssetResponseMultiError, or nil if none found.
func (m *UpdateTagAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTagAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTagAssetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTagAssetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTagAssetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTagAssetResponseMultiError(errors)
	}

	return nil
}

// UpdateTagAssetResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTagAssetResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTagAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTagAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTagAssetResponseMultiError) AllErrors() []error { return m }

// UpdateTagAssetResponseValidationError is the validation error returned by
// UpdateTagAssetResponse.Validate if the designated constraints aren't met.
type UpdateTagAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagAssetResponseValidationError) ErrorName() string {
	return "UpdateTagAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTagAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagAssetResponseValidationError{}

// Validate checks the field values on DeleteTagAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTagAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTagAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTagAssetRequestMultiError, or nil if none found.
func (m *DeleteTagAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTagAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	// no validation rules for TemplateUrn

	if len(errors) > 0 {
		return DeleteTagAssetRequestMultiError(errors)
	}

	return nil
}

// DeleteTagAssetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTagAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTagAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTagAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTagAssetRequestMultiError) AllErrors() []error { return m }

// DeleteTagAssetRequestValidationError is the validation error returned by
// DeleteTagAssetRequest.Validate if the designated constraints aren't met.
type DeleteTagAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagAssetRequestValidationError) ErrorName() string {
	return "DeleteTagAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTagAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagAssetRequestValidationError{}

// Validate checks the field values on DeleteTagAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTagAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTagAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTagAssetResponseMultiError, or nil if none found.
func (m *DeleteTagAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTagAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTagAssetResponseMultiError(errors)
	}

	return nil
}

// DeleteTagAssetResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTagAssetResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTagAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTagAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTagAssetResponseMultiError) AllErrors() []error { return m }

// DeleteTagAssetResponseValidationError is the validation error returned by
// DeleteTagAssetResponse.Validate if the designated constraints aren't met.
type DeleteTagAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagAssetResponseValidationError) ErrorName() string {
	return "DeleteTagAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTagAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagAssetResponseValidationError{}

// Validate checks the field values on GetAllTagsByAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllTagsByAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllTagsByAssetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllTagsByAssetRequestMultiError, or nil if none found.
func (m *GetAllTagsByAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllTagsByAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	if len(errors) > 0 {
		return GetAllTagsByAssetRequestMultiError(errors)
	}

	return nil
}

// GetAllTagsByAssetRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllTagsByAssetRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllTagsByAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllTagsByAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllTagsByAssetRequestMultiError) AllErrors() []error { return m }

// GetAllTagsByAssetRequestValidationError is the validation error returned by
// GetAllTagsByAssetRequest.Validate if the designated constraints aren't met.
type GetAllTagsByAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTagsByAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTagsByAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTagsByAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTagsByAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTagsByAssetRequestValidationError) ErrorName() string {
	return "GetAllTagsByAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTagsByAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTagsByAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTagsByAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTagsByAssetRequestValidationError{}

// Validate checks the field values on GetAllTagsByAssetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllTagsByAssetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllTagsByAssetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllTagsByAssetResponseMultiError, or nil if none found.
func (m *GetAllTagsByAssetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllTagsByAssetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllTagsByAssetResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllTagsByAssetResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllTagsByAssetResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllTagsByAssetResponseMultiError(errors)
	}

	return nil
}

// GetAllTagsByAssetResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllTagsByAssetResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllTagsByAssetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllTagsByAssetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllTagsByAssetResponseMultiError) AllErrors() []error { return m }

// GetAllTagsByAssetResponseValidationError is the validation error returned by
// GetAllTagsByAssetResponse.Validate if the designated constraints aren't met.
type GetAllTagsByAssetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTagsByAssetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTagsByAssetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTagsByAssetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTagsByAssetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTagsByAssetResponseValidationError) ErrorName() string {
	return "GetAllTagsByAssetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTagsByAssetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTagsByAssetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTagsByAssetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTagsByAssetResponseValidationError{}

// Validate checks the field values on GetAllTagTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllTagTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllTagTemplatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllTagTemplatesRequestMultiError, or nil if none found.
func (m *GetAllTagTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllTagTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	if len(errors) > 0 {
		return GetAllTagTemplatesRequestMultiError(errors)
	}

	return nil
}

// GetAllTagTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllTagTemplatesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAllTagTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllTagTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllTagTemplatesRequestMultiError) AllErrors() []error { return m }

// GetAllTagTemplatesRequestValidationError is the validation error returned by
// GetAllTagTemplatesRequest.Validate if the designated constraints aren't met.
type GetAllTagTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTagTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTagTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTagTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTagTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTagTemplatesRequestValidationError) ErrorName() string {
	return "GetAllTagTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTagTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTagTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTagTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTagTemplatesRequestValidationError{}

// Validate checks the field values on GetAllTagTemplatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllTagTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllTagTemplatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllTagTemplatesResponseMultiError, or nil if none found.
func (m *GetAllTagTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllTagTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllTagTemplatesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllTagTemplatesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllTagTemplatesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllTagTemplatesResponseMultiError(errors)
	}

	return nil
}

// GetAllTagTemplatesResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllTagTemplatesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAllTagTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllTagTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllTagTemplatesResponseMultiError) AllErrors() []error { return m }

// GetAllTagTemplatesResponseValidationError is the validation error returned
// by GetAllTagTemplatesResponse.Validate if the designated constraints aren't met.
type GetAllTagTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllTagTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllTagTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllTagTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllTagTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllTagTemplatesResponseValidationError) ErrorName() string {
	return "GetAllTagTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllTagTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllTagTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllTagTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllTagTemplatesResponseValidationError{}

// Validate checks the field values on CreateTagTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTagTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTagTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTagTemplateRequestMultiError, or nil if none found.
func (m *CreateTagTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTagTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for DisplayName

	// no validation rules for Description

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateTagTemplateRequestValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateTagTemplateRequestValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateTagTemplateRequestValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateTagTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateTagTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTagTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTagTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTagTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTagTemplateRequestMultiError) AllErrors() []error { return m }

// CreateTagTemplateRequestValidationError is the validation error returned by
// CreateTagTemplateRequest.Validate if the designated constraints aren't met.
type CreateTagTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagTemplateRequestValidationError) ErrorName() string {
	return "CreateTagTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTagTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagTemplateRequestValidationError{}

// Validate checks the field values on CreateTagTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTagTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTagTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTagTemplateResponseMultiError, or nil if none found.
func (m *CreateTagTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTagTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTagTemplateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTagTemplateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTagTemplateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTagTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateTagTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTagTemplateResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateTagTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTagTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTagTemplateResponseMultiError) AllErrors() []error { return m }

// CreateTagTemplateResponseValidationError is the validation error returned by
// CreateTagTemplateResponse.Validate if the designated constraints aren't met.
type CreateTagTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTagTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTagTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTagTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTagTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTagTemplateResponseValidationError) ErrorName() string {
	return "CreateTagTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTagTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTagTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTagTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTagTemplateResponseValidationError{}

// Validate checks the field values on GetTagTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTagTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTagTemplateRequestMultiError, or nil if none found.
func (m *GetTagTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateUrn

	if len(errors) > 0 {
		return GetTagTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTagTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by GetTagTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTagTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagTemplateRequestMultiError) AllErrors() []error { return m }

// GetTagTemplateRequestValidationError is the validation error returned by
// GetTagTemplateRequest.Validate if the designated constraints aren't met.
type GetTagTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagTemplateRequestValidationError) ErrorName() string {
	return "GetTagTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTagTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagTemplateRequestValidationError{}

// Validate checks the field values on GetTagTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTagTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTagTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTagTemplateResponseMultiError, or nil if none found.
func (m *GetTagTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTagTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTagTemplateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTagTemplateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTagTemplateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTagTemplateResponseMultiError(errors)
	}

	return nil
}

// GetTagTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetTagTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTagTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTagTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTagTemplateResponseMultiError) AllErrors() []error { return m }

// GetTagTemplateResponseValidationError is the validation error returned by
// GetTagTemplateResponse.Validate if the designated constraints aren't met.
type GetTagTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTagTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTagTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTagTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTagTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTagTemplateResponseValidationError) ErrorName() string {
	return "GetTagTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTagTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTagTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTagTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTagTemplateResponseValidationError{}

// Validate checks the field values on UpdateTagTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTagTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTagTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTagTemplateRequestMultiError, or nil if none found.
func (m *UpdateTagTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTagTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateUrn

	// no validation rules for DisplayName

	// no validation rules for Description

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTagTemplateRequestValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTagTemplateRequestValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTagTemplateRequestValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateTagTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateTagTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTagTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTagTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTagTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTagTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateTagTemplateRequestValidationError is the validation error returned by
// UpdateTagTemplateRequest.Validate if the designated constraints aren't met.
type UpdateTagTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagTemplateRequestValidationError) ErrorName() string {
	return "UpdateTagTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTagTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagTemplateRequestValidationError{}

// Validate checks the field values on UpdateTagTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTagTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTagTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTagTemplateResponseMultiError, or nil if none found.
func (m *UpdateTagTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTagTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTagTemplateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTagTemplateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTagTemplateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTagTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateTagTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTagTemplateResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateTagTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTagTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTagTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateTagTemplateResponseValidationError is the validation error returned by
// UpdateTagTemplateResponse.Validate if the designated constraints aren't met.
type UpdateTagTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTagTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTagTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTagTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTagTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTagTemplateResponseValidationError) ErrorName() string {
	return "UpdateTagTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTagTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTagTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTagTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTagTemplateResponseValidationError{}

// Validate checks the field values on DeleteTagTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTagTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTagTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTagTemplateRequestMultiError, or nil if none found.
func (m *DeleteTagTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTagTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateUrn

	if len(errors) > 0 {
		return DeleteTagTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteTagTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTagTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTagTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTagTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTagTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTagTemplateRequestValidationError is the validation error returned by
// DeleteTagTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTagTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagTemplateRequestValidationError) ErrorName() string {
	return "DeleteTagTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTagTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagTemplateRequestValidationError{}

// Validate checks the field values on DeleteTagTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTagTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTagTemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTagTemplateResponseMultiError, or nil if none found.
func (m *DeleteTagTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTagTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTagTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteTagTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTagTemplateResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteTagTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTagTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTagTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteTagTemplateResponseValidationError is the validation error returned by
// DeleteTagTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTagTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTagTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTagTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTagTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTagTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTagTemplateResponseValidationError) ErrorName() string {
	return "DeleteTagTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTagTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTagTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTagTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTagTemplateResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Email

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Change with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Change) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Change with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChangeMultiError, or nil if none found.
func (m *Change) ValidateAll() error {
	return m.validate(true)
}

func (m *Change) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeMultiError(errors)
	}

	return nil
}

// ChangeMultiError is an error wrapping multiple validation errors returned by
// Change.ValidateAll() if the designated constraints aren't met.
type ChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMultiError) AllErrors() []error { return m }

// ChangeValidationError is the validation error returned by Change.Validate if
// the designated constraints aren't met.
type ChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeValidationError) ErrorName() string { return "ChangeValidationError" }

// Error satisfies the builtin error interface
func (e ChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeValidationError{}

// Validate checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Asset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AssetMultiError, or nil if none found.
func (m *Asset) ValidateAll() error {
	return m.validate(true)
}

func (m *Asset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Urn

	// no validation rules for Type

	// no validation rules for Service

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	for idx, item := range m.GetOwners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetValidationError{
					field:  fmt.Sprintf("Owners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChangelog() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Changelog[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Changelog[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetValidationError{
					field:  fmt.Sprintf("Changelog[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Url

	for idx, item := range m.GetProbes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Probes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Probes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetValidationError{
					field:  fmt.Sprintf("Probes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AssetMultiError(errors)
	}

	return nil
}

// AssetMultiError is an error wrapping multiple validation errors returned by
// Asset.ValidateAll() if the designated constraints aren't met.
type AssetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetMultiError) AllErrors() []error { return m }

// AssetValidationError is the validation error returned by Asset.Validate if
// the designated constraints aren't met.
type AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetValidationError) ErrorName() string { return "AssetValidationError" }

// Error satisfies the builtin error interface
func (e AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetValidationError{}

// Validate checks the field values on Probe with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Probe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Probe with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProbeMultiError, or nil if none found.
func (m *Probe) ValidateAll() error {
	return m.validate(true)
}

func (m *Probe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AssetUrn

	// no validation rules for Status

	// no validation rules for StatusReason

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProbeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProbeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProbeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProbeValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProbeValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProbeValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProbeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProbeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProbeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProbeMultiError(errors)
	}

	return nil
}

// ProbeMultiError is an error wrapping multiple validation errors returned by
// Probe.ValidateAll() if the designated constraints aren't met.
type ProbeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProbeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProbeMultiError) AllErrors() []error { return m }

// ProbeValidationError is the validation error returned by Probe.Validate if
// the designated constraints aren't met.
type ProbeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProbeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProbeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProbeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProbeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProbeValidationError) ErrorName() string { return "ProbeValidationError" }

// Error satisfies the builtin error interface
func (e ProbeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProbe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProbeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProbeValidationError{}

// Validate checks the field values on Discussion with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Discussion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Discussion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiscussionMultiError, or
// nil if none found.
func (m *Discussion) ValidateAll() error {
	return m.validate(true)
}

func (m *Discussion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Body

	// no validation rules for Type

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscussionValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscussionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscussionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscussionMultiError(errors)
	}

	return nil
}

// DiscussionMultiError is an error wrapping multiple validation errors
// returned by Discussion.ValidateAll() if the designated constraints aren't met.
type DiscussionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscussionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscussionMultiError) AllErrors() []error { return m }

// DiscussionValidationError is the validation error returned by
// Discussion.Validate if the designated constraints aren't met.
type DiscussionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscussionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscussionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscussionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscussionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscussionValidationError) ErrorName() string { return "DiscussionValidationError" }

// Error satisfies the builtin error interface
func (e DiscussionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscussion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscussionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscussionValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DiscussionId

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on LineageEdge with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LineageEdge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineageEdge with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LineageEdgeMultiError, or
// nil if none found.
func (m *LineageEdge) ValidateAll() error {
	return m.validate(true)
}

func (m *LineageEdge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Target

	if all {
		switch v := interface{}(m.GetProp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LineageEdgeValidationError{
					field:  "Prop",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LineageEdgeValidationError{
					field:  "Prop",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LineageEdgeValidationError{
				field:  "Prop",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LineageEdgeMultiError(errors)
	}

	return nil
}

// LineageEdgeMultiError is an error wrapping multiple validation errors
// returned by LineageEdge.ValidateAll() if the designated constraints aren't met.
type LineageEdgeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineageEdgeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineageEdgeMultiError) AllErrors() []error { return m }

// LineageEdgeValidationError is the validation error returned by
// LineageEdge.Validate if the designated constraints aren't met.
type LineageEdgeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineageEdgeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineageEdgeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineageEdgeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineageEdgeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineageEdgeValidationError) ErrorName() string { return "LineageEdgeValidationError" }

// Error satisfies the builtin error interface
func (e LineageEdgeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineageEdge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineageEdgeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineageEdgeValidationError{}

// Validate checks the field values on LineageNode with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LineageNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LineageNode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LineageNodeMultiError, or
// nil if none found.
func (m *LineageNode) ValidateAll() error {
	return m.validate(true)
}

func (m *LineageNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for Type

	// no validation rules for Service

	if len(errors) > 0 {
		return LineageNodeMultiError(errors)
	}

	return nil
}

// LineageNodeMultiError is an error wrapping multiple validation errors
// returned by LineageNode.ValidateAll() if the designated constraints aren't met.
type LineageNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LineageNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LineageNodeMultiError) AllErrors() []error { return m }

// LineageNodeValidationError is the validation error returned by
// LineageNode.Validate if the designated constraints aren't met.
type LineageNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LineageNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LineageNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LineageNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LineageNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LineageNodeValidationError) ErrorName() string { return "LineageNodeValidationError" }

// Error satisfies the builtin error interface
func (e LineageNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLineageNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LineageNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LineageNodeValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssetId

	// no validation rules for TemplateUrn

	for idx, item := range m.GetTagValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TagValidationError{
						field:  fmt.Sprintf("TagValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TagValidationError{
						field:  fmt.Sprintf("TagValues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TagValidationError{
					field:  fmt.Sprintf("TagValues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TemplateDisplayName

	// no validation rules for TemplateDescription

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on TagValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TagValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TagValueMultiError, or nil
// if none found.
func (m *TagValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TagValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FieldId

	if all {
		switch v := interface{}(m.GetFieldValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagValueValidationError{
					field:  "FieldValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagValueValidationError{
					field:  "FieldValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagValueValidationError{
				field:  "FieldValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FieldUrn

	// no validation rules for FieldDisplayName

	// no validation rules for FieldDescription

	// no validation rules for FieldDataType

	// no validation rules for FieldRequired

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagValueValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagValueValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagValueValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagValueValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagValueValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagValueValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TagValueMultiError(errors)
	}

	return nil
}

// TagValueMultiError is an error wrapping multiple validation errors returned
// by TagValue.ValidateAll() if the designated constraints aren't met.
type TagValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagValueMultiError) AllErrors() []error { return m }

// TagValueValidationError is the validation error returned by
// TagValue.Validate if the designated constraints aren't met.
type TagValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValueValidationError) ErrorName() string { return "TagValueValidationError" }

// Error satisfies the builtin error interface
func (e TagValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValueValidationError{}

// Validate checks the field values on TagTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TagTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagTemplate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TagTemplateMultiError, or
// nil if none found.
func (m *TagTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *TagTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for DisplayName

	// no validation rules for Description

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TagTemplateValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TagTemplateValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TagTemplateValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagTemplateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagTemplateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagTemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagTemplateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagTemplateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TagTemplateMultiError(errors)
	}

	return nil
}

// TagTemplateMultiError is an error wrapping multiple validation errors
// returned by TagTemplate.ValidateAll() if the designated constraints aren't met.
type TagTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagTemplateMultiError) AllErrors() []error { return m }

// TagTemplateValidationError is the validation error returned by
// TagTemplate.Validate if the designated constraints aren't met.
type TagTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagTemplateValidationError) ErrorName() string { return "TagTemplateValidationError" }

// Error satisfies the builtin error interface
func (e TagTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagTemplateValidationError{}

// Validate checks the field values on TagTemplateField with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TagTemplateField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TagTemplateField with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TagTemplateFieldMultiError, or nil if none found.
func (m *TagTemplateField) ValidateAll() error {
	return m.validate(true)
}

func (m *TagTemplateField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Urn

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for DataType

	// no validation rules for Required

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagTemplateFieldValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagTemplateFieldValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagTemplateFieldValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TagTemplateFieldValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TagTemplateFieldValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TagTemplateFieldValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TagTemplateFieldMultiError(errors)
	}

	return nil
}

// TagTemplateFieldMultiError is an error wrapping multiple validation errors
// returned by TagTemplateField.ValidateAll() if the designated constraints
// aren't met.
type TagTemplateFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagTemplateFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagTemplateFieldMultiError) AllErrors() []error { return m }

// TagTemplateFieldValidationError is the validation error returned by
// TagTemplateField.Validate if the designated constraints aren't met.
type TagTemplateFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagTemplateFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagTemplateFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagTemplateFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagTemplateFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagTemplateFieldValidationError) ErrorName() string { return "TagTemplateFieldValidationError" }

// Error satisfies the builtin error interface
func (e TagTemplateFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTagTemplateField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagTemplateFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagTemplateFieldValidationError{}

// Validate checks the field values on Type with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Type with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TypeMultiError, or nil if none found.
func (m *Type) ValidateAll() error {
	return m.validate(true)
}

func (m *Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Count

	if len(errors) > 0 {
		return TypeMultiError(errors)
	}

	return nil
}

// TypeMultiError is an error wrapping multiple validation errors returned by
// Type.ValidateAll() if the designated constraints aren't met.
type TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeMultiError) AllErrors() []error { return m }

// TypeValidationError is the validation error returned by Type.Validate if the
// designated constraints aren't met.
type TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeValidationError) ErrorName() string { return "TypeValidationError" }

// Error satisfies the builtin error interface
func (e TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeValidationError{}

// Validate checks the field values on GetGraphResponse_ProbesInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGraphResponse_ProbesInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGraphResponse_ProbesInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGraphResponse_ProbesInfoMultiError, or nil if none found.
func (m *GetGraphResponse_ProbesInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGraphResponse_ProbesInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLatest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGraphResponse_ProbesInfoValidationError{
					field:  "Latest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGraphResponse_ProbesInfoValidationError{
					field:  "Latest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGraphResponse_ProbesInfoValidationError{
				field:  "Latest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGraphResponse_ProbesInfoMultiError(errors)
	}

	return nil
}

// GetGraphResponse_ProbesInfoMultiError is an error wrapping multiple
// validation errors returned by GetGraphResponse_ProbesInfo.ValidateAll() if
// the designated constraints aren't met.
type GetGraphResponse_ProbesInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGraphResponse_ProbesInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGraphResponse_ProbesInfoMultiError) AllErrors() []error { return m }

// GetGraphResponse_ProbesInfoValidationError is the validation error returned
// by GetGraphResponse_ProbesInfo.Validate if the designated constraints
// aren't met.
type GetGraphResponse_ProbesInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGraphResponse_ProbesInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGraphResponse_ProbesInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGraphResponse_ProbesInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGraphResponse_ProbesInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGraphResponse_ProbesInfoValidationError) ErrorName() string {
	return "GetGraphResponse_ProbesInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetGraphResponse_ProbesInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGraphResponse_ProbesInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGraphResponse_ProbesInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGraphResponse_ProbesInfoValidationError{}

// Validate checks the field values on GetGraphResponse_NodeAttributes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGraphResponse_NodeAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGraphResponse_NodeAttributes with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetGraphResponse_NodeAttributesMultiError, or nil if none found.
func (m *GetGraphResponse_NodeAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGraphResponse_NodeAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProbes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGraphResponse_NodeAttributesValidationError{
					field:  "Probes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGraphResponse_NodeAttributesValidationError{
					field:  "Probes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProbes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGraphResponse_NodeAttributesValidationError{
				field:  "Probes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGraphResponse_NodeAttributesMultiError(errors)
	}

	return nil
}

// GetGraphResponse_NodeAttributesMultiError is an error wrapping multiple
// validation errors returned by GetGraphResponse_NodeAttributes.ValidateAll()
// if the designated constraints aren't met.
type GetGraphResponse_NodeAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGraphResponse_NodeAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGraphResponse_NodeAttributesMultiError) AllErrors() []error { return m }

// GetGraphResponse_NodeAttributesValidationError is the validation error
// returned by GetGraphResponse_NodeAttributes.Validate if the designated
// constraints aren't met.
type GetGraphResponse_NodeAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGraphResponse_NodeAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGraphResponse_NodeAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGraphResponse_NodeAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGraphResponse_NodeAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGraphResponse_NodeAttributesValidationError) ErrorName() string {
	return "GetGraphResponse_NodeAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e GetGraphResponse_NodeAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGraphResponse_NodeAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGraphResponse_NodeAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGraphResponse_NodeAttributesValidationError{}

// Validate checks the field values on UpsertAssetRequest_Asset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertAssetRequest_Asset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAssetRequest_Asset with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertAssetRequest_AssetMultiError, or nil if none found.
func (m *UpsertAssetRequest_Asset) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAssetRequest_Asset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for Type

	// no validation rules for Name

	// no validation rules for Service

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertAssetRequest_AssetValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertAssetRequest_AssetValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertAssetRequest_AssetValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	for idx, item := range m.GetOwners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertAssetRequest_AssetValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertAssetRequest_AssetValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertAssetRequest_AssetValidationError{
					field:  fmt.Sprintf("Owners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Url

	if len(errors) > 0 {
		return UpsertAssetRequest_AssetMultiError(errors)
	}

	return nil
}

// UpsertAssetRequest_AssetMultiError is an error wrapping multiple validation
// errors returned by UpsertAssetRequest_Asset.ValidateAll() if the designated
// constraints aren't met.
type UpsertAssetRequest_AssetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAssetRequest_AssetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAssetRequest_AssetMultiError) AllErrors() []error { return m }

// UpsertAssetRequest_AssetValidationError is the validation error returned by
// UpsertAssetRequest_Asset.Validate if the designated constraints aren't met.
type UpsertAssetRequest_AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAssetRequest_AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAssetRequest_AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAssetRequest_AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAssetRequest_AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAssetRequest_AssetValidationError) ErrorName() string {
	return "UpsertAssetRequest_AssetValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAssetRequest_AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAssetRequest_Asset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAssetRequest_AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAssetRequest_AssetValidationError{}

// Validate checks the field values on UpsertPatchAssetRequest_Asset with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertPatchAssetRequest_Asset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertPatchAssetRequest_Asset with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertPatchAssetRequest_AssetMultiError, or nil if none found.
func (m *UpsertPatchAssetRequest_Asset) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertPatchAssetRequest_Asset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for Type

	if wrapper := m.GetName(); wrapper != nil {

		if wrapper.GetValue() != "" {

		}

	}

	// no validation rules for Service

	if wrapper := m.GetDescription(); wrapper != nil {

		if wrapper.GetValue() != "" {

		}

	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertPatchAssetRequest_AssetValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertPatchAssetRequest_AssetValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertPatchAssetRequest_AssetValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	for idx, item := range m.GetOwners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertPatchAssetRequest_AssetValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertPatchAssetRequest_AssetValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertPatchAssetRequest_AssetValidationError{
					field:  fmt.Sprintf("Owners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Url

	if len(errors) > 0 {
		return UpsertPatchAssetRequest_AssetMultiError(errors)
	}

	return nil
}

// UpsertPatchAssetRequest_AssetMultiError is an error wrapping multiple
// validation errors returned by UpsertPatchAssetRequest_Asset.ValidateAll()
// if the designated constraints aren't met.
type UpsertPatchAssetRequest_AssetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertPatchAssetRequest_AssetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertPatchAssetRequest_AssetMultiError) AllErrors() []error { return m }

// UpsertPatchAssetRequest_AssetValidationError is the validation error
// returned by UpsertPatchAssetRequest_Asset.Validate if the designated
// constraints aren't met.
type UpsertPatchAssetRequest_AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertPatchAssetRequest_AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertPatchAssetRequest_AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertPatchAssetRequest_AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertPatchAssetRequest_AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertPatchAssetRequest_AssetValidationError) ErrorName() string {
	return "UpsertPatchAssetRequest_AssetValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertPatchAssetRequest_AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertPatchAssetRequest_Asset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertPatchAssetRequest_AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertPatchAssetRequest_AssetValidationError{}

// Validate checks the field values on CreateAssetProbeRequest_Probe with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssetProbeRequest_Probe) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssetProbeRequest_Probe with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAssetProbeRequest_ProbeMultiError, or nil if none found.
func (m *CreateAssetProbeRequest_Probe) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssetProbeRequest_Probe) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetStatus()) < 1 {
		err := CreateAssetProbeRequest_ProbeValidationError{
			field:  "Status",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatusReason

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAssetProbeRequest_ProbeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAssetProbeRequest_ProbeValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssetProbeRequest_ProbeValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAssetProbeRequest_ProbeValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAssetProbeRequest_ProbeValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssetProbeRequest_ProbeValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAssetProbeRequest_ProbeMultiError(errors)
	}

	return nil
}

// CreateAssetProbeRequest_ProbeMultiError is an error wrapping multiple
// validation errors returned by CreateAssetProbeRequest_Probe.ValidateAll()
// if the designated constraints aren't met.
type CreateAssetProbeRequest_ProbeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssetProbeRequest_ProbeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssetProbeRequest_ProbeMultiError) AllErrors() []error { return m }

// CreateAssetProbeRequest_ProbeValidationError is the validation error
// returned by CreateAssetProbeRequest_Probe.Validate if the designated
// constraints aren't met.
type CreateAssetProbeRequest_ProbeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssetProbeRequest_ProbeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssetProbeRequest_ProbeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssetProbeRequest_ProbeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssetProbeRequest_ProbeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssetProbeRequest_ProbeValidationError) ErrorName() string {
	return "CreateAssetProbeRequest_ProbeValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssetProbeRequest_ProbeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssetProbeRequest_Probe.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssetProbeRequest_ProbeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssetProbeRequest_ProbeValidationError{}
