// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: odpf/compass/v1beta1/service.proto

package compassv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllDiscussionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllDiscussionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllDiscussionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllDiscussionsRequestMultiError, or nil if none found.
func (m *GetAllDiscussionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllDiscussionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetType() != "" {

		if _, ok := _GetAllDiscussionsRequest_Type_InLookup[m.GetType()]; !ok {
			err := GetAllDiscussionsRequestValidationError{
				field:  "Type",
				reason: "value must be in list [openended issues qanda all]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetState() != "" {

		if _, ok := _GetAllDiscussionsRequest_State_InLookup[m.GetState()]; !ok {
			err := GetAllDiscussionsRequestValidationError{
				field:  "State",
				reason: "value must be in list [open closed all]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOwner() != "" {

	}

	if m.GetAssignee() != "" {

	}

	if m.GetAsset() != "" {

	}

	if m.GetLabels() != "" {

	}

	if m.GetSort() != "" {

		if _, ok := _GetAllDiscussionsRequest_Sort_InLookup[m.GetSort()]; !ok {
			err := GetAllDiscussionsRequestValidationError{
				field:  "Sort",
				reason: "value must be in list [created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetDirection() != "" {

		if _, ok := _GetAllDiscussionsRequest_Direction_InLookup[m.GetDirection()]; !ok {
			err := GetAllDiscussionsRequestValidationError{
				field:  "Direction",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetAllDiscussionsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetAllDiscussionsRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAllDiscussionsRequestMultiError(errors)
	}

	return nil
}

// GetAllDiscussionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllDiscussionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllDiscussionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllDiscussionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllDiscussionsRequestMultiError) AllErrors() []error { return m }

// GetAllDiscussionsRequestValidationError is the validation error returned by
// GetAllDiscussionsRequest.Validate if the designated constraints aren't met.
type GetAllDiscussionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllDiscussionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllDiscussionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllDiscussionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllDiscussionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllDiscussionsRequestValidationError) ErrorName() string {
	return "GetAllDiscussionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllDiscussionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllDiscussionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllDiscussionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllDiscussionsRequestValidationError{}

var _GetAllDiscussionsRequest_Type_InLookup = map[string]struct{}{
	"openended": {},
	"issues":    {},
	"qanda":     {},
	"all":       {},
}

var _GetAllDiscussionsRequest_State_InLookup = map[string]struct{}{
	"open":   {},
	"closed": {},
	"all":    {},
}

var _GetAllDiscussionsRequest_Sort_InLookup = map[string]struct{}{
	"created_at": {},
	"updated_at": {},
}

var _GetAllDiscussionsRequest_Direction_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetAllDiscussionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllDiscussionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllDiscussionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllDiscussionsResponseMultiError, or nil if none found.
func (m *GetAllDiscussionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllDiscussionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllDiscussionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllDiscussionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllDiscussionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllDiscussionsResponseMultiError(errors)
	}

	return nil
}

// GetAllDiscussionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllDiscussionsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllDiscussionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllDiscussionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllDiscussionsResponseMultiError) AllErrors() []error { return m }

// GetAllDiscussionsResponseValidationError is the validation error returned by
// GetAllDiscussionsResponse.Validate if the designated constraints aren't met.
type GetAllDiscussionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllDiscussionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllDiscussionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllDiscussionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllDiscussionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllDiscussionsResponseValidationError) ErrorName() string {
	return "GetAllDiscussionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllDiscussionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllDiscussionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllDiscussionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllDiscussionsResponseValidationError{}

// Validate checks the field values on CreateDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscussionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscussionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiscussionRequestMultiError, or nil if none found.
func (m *CreateDiscussionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscussionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateDiscussionRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		err := CreateDiscussionRequestValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateDiscussionRequest_Type_InLookup[m.GetType()]; !ok {
		err := CreateDiscussionRequestValidationError{
			field:  "Type",
			reason: "value must be in list [openended issues qanda]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() != "" {

		if _, ok := _CreateDiscussionRequest_State_InLookup[m.GetState()]; !ok {
			err := CreateDiscussionRequestValidationError{
				field:  "State",
				reason: "value must be in list [open closed]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetLabels()) > 0 {

		_CreateDiscussionRequest_Labels_Unique := make(map[string]struct{}, len(m.GetLabels()))

		for idx, item := range m.GetLabels() {
			_, _ = idx, item

			if _, exists := _CreateDiscussionRequest_Labels_Unique[item]; exists {
				err := CreateDiscussionRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_CreateDiscussionRequest_Labels_Unique[item] = struct{}{}
			}

			// no validation rules for Labels[idx]
		}

	}

	if len(m.GetAssets()) > 0 {

		_CreateDiscussionRequest_Assets_Unique := make(map[string]struct{}, len(m.GetAssets()))

		for idx, item := range m.GetAssets() {
			_, _ = idx, item

			if _, exists := _CreateDiscussionRequest_Assets_Unique[item]; exists {
				err := CreateDiscussionRequestValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_CreateDiscussionRequest_Assets_Unique[item] = struct{}{}
			}

			// no validation rules for Assets[idx]
		}

	}

	if len(m.GetAssignees()) > 0 {

		_CreateDiscussionRequest_Assignees_Unique := make(map[string]struct{}, len(m.GetAssignees()))

		for idx, item := range m.GetAssignees() {
			_, _ = idx, item

			if _, exists := _CreateDiscussionRequest_Assignees_Unique[item]; exists {
				err := CreateDiscussionRequestValidationError{
					field:  fmt.Sprintf("Assignees[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_CreateDiscussionRequest_Assignees_Unique[item] = struct{}{}
			}

			// no validation rules for Assignees[idx]
		}

	}

	if len(errors) > 0 {
		return CreateDiscussionRequestMultiError(errors)
	}

	return nil
}

// CreateDiscussionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDiscussionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscussionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscussionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscussionRequestMultiError) AllErrors() []error { return m }

// CreateDiscussionRequestValidationError is the validation error returned by
// CreateDiscussionRequest.Validate if the designated constraints aren't met.
type CreateDiscussionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscussionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscussionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscussionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscussionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscussionRequestValidationError) ErrorName() string {
	return "CreateDiscussionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscussionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscussionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscussionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscussionRequestValidationError{}

var _CreateDiscussionRequest_Type_InLookup = map[string]struct{}{
	"openended": {},
	"issues":    {},
	"qanda":     {},
}

var _CreateDiscussionRequest_State_InLookup = map[string]struct{}{
	"open":   {},
	"closed": {},
}

// Validate checks the field values on CreateDiscussionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscussionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscussionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiscussionResponseMultiError, or nil if none found.
func (m *CreateDiscussionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscussionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDiscussionResponseMultiError(errors)
	}

	return nil
}

// CreateDiscussionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDiscussionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscussionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscussionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscussionResponseMultiError) AllErrors() []error { return m }

// CreateDiscussionResponseValidationError is the validation error returned by
// CreateDiscussionResponse.Validate if the designated constraints aren't met.
type CreateDiscussionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscussionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscussionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscussionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscussionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscussionResponseValidationError) ErrorName() string {
	return "CreateDiscussionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscussionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscussionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscussionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscussionResponseValidationError{}

// Validate checks the field values on GetDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscussionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscussionRequestMultiError, or nil if none found.
func (m *GetDiscussionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscussionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDiscussionRequestMultiError(errors)
	}

	return nil
}

// GetDiscussionRequestMultiError is an error wrapping multiple validation
// errors returned by GetDiscussionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDiscussionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscussionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscussionRequestMultiError) AllErrors() []error { return m }

// GetDiscussionRequestValidationError is the validation error returned by
// GetDiscussionRequest.Validate if the designated constraints aren't met.
type GetDiscussionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscussionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscussionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscussionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscussionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscussionRequestValidationError) ErrorName() string {
	return "GetDiscussionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscussionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscussionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscussionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscussionRequestValidationError{}

// Validate checks the field values on GetDiscussionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscussionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscussionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscussionResponseMultiError, or nil if none found.
func (m *GetDiscussionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscussionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDiscussionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDiscussionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDiscussionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDiscussionResponseMultiError(errors)
	}

	return nil
}

// GetDiscussionResponseMultiError is an error wrapping multiple validation
// errors returned by GetDiscussionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDiscussionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscussionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscussionResponseMultiError) AllErrors() []error { return m }

// GetDiscussionResponseValidationError is the validation error returned by
// GetDiscussionResponse.Validate if the designated constraints aren't met.
type GetDiscussionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscussionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscussionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscussionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscussionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscussionResponseValidationError) ErrorName() string {
	return "GetDiscussionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscussionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscussionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscussionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscussionResponseValidationError{}

// Validate checks the field values on PatchDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchDiscussionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchDiscussionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchDiscussionRequestMultiError, or nil if none found.
func (m *PatchDiscussionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchDiscussionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetTitle() != "" {

	}

	if m.GetBody() != "" {

	}

	if m.GetType() != "" {

		if _, ok := _PatchDiscussionRequest_Type_InLookup[m.GetType()]; !ok {
			err := PatchDiscussionRequestValidationError{
				field:  "Type",
				reason: "value must be in list [openended issues qanda]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetState() != "" {

		if _, ok := _PatchDiscussionRequest_State_InLookup[m.GetState()]; !ok {
			err := PatchDiscussionRequestValidationError{
				field:  "State",
				reason: "value must be in list [open closed]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetLabels()) > 0 {

		_PatchDiscussionRequest_Labels_Unique := make(map[string]struct{}, len(m.GetLabels()))

		for idx, item := range m.GetLabels() {
			_, _ = idx, item

			if _, exists := _PatchDiscussionRequest_Labels_Unique[item]; exists {
				err := PatchDiscussionRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_PatchDiscussionRequest_Labels_Unique[item] = struct{}{}
			}

			// no validation rules for Labels[idx]
		}

	}

	if len(m.GetAssets()) > 0 {

		_PatchDiscussionRequest_Assets_Unique := make(map[string]struct{}, len(m.GetAssets()))

		for idx, item := range m.GetAssets() {
			_, _ = idx, item

			if _, exists := _PatchDiscussionRequest_Assets_Unique[item]; exists {
				err := PatchDiscussionRequestValidationError{
					field:  fmt.Sprintf("Assets[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_PatchDiscussionRequest_Assets_Unique[item] = struct{}{}
			}

			// no validation rules for Assets[idx]
		}

	}

	if len(m.GetAssignees()) > 0 {

		_PatchDiscussionRequest_Assignees_Unique := make(map[string]struct{}, len(m.GetAssignees()))

		for idx, item := range m.GetAssignees() {
			_, _ = idx, item

			if _, exists := _PatchDiscussionRequest_Assignees_Unique[item]; exists {
				err := PatchDiscussionRequestValidationError{
					field:  fmt.Sprintf("Assignees[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_PatchDiscussionRequest_Assignees_Unique[item] = struct{}{}
			}

			// no validation rules for Assignees[idx]
		}

	}

	if len(errors) > 0 {
		return PatchDiscussionRequestMultiError(errors)
	}

	return nil
}

// PatchDiscussionRequestMultiError is an error wrapping multiple validation
// errors returned by PatchDiscussionRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchDiscussionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchDiscussionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchDiscussionRequestMultiError) AllErrors() []error { return m }

// PatchDiscussionRequestValidationError is the validation error returned by
// PatchDiscussionRequest.Validate if the designated constraints aren't met.
type PatchDiscussionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchDiscussionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchDiscussionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchDiscussionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchDiscussionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchDiscussionRequestValidationError) ErrorName() string {
	return "PatchDiscussionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchDiscussionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchDiscussionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchDiscussionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchDiscussionRequestValidationError{}

var _PatchDiscussionRequest_Type_InLookup = map[string]struct{}{
	"openended": {},
	"issues":    {},
	"qanda":     {},
}

var _PatchDiscussionRequest_State_InLookup = map[string]struct{}{
	"open":   {},
	"closed": {},
}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		err := CreateCommentRequestValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentResponseMultiError, or nil if none found.
func (m *CreateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCommentResponseMultiError(errors)
	}

	return nil
}

// CreateCommentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentResponseMultiError) AllErrors() []error { return m }

// CreateCommentResponseValidationError is the validation error returned by
// CreateCommentResponse.Validate if the designated constraints aren't met.
type CreateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentResponseValidationError) ErrorName() string {
	return "CreateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentResponseValidationError{}

// Validate checks the field values on GetAllCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCommentsRequestMultiError, or nil if none found.
func (m *GetAllCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	if m.GetSort() != "" {

		if _, ok := _GetAllCommentsRequest_Sort_InLookup[m.GetSort()]; !ok {
			err := GetAllCommentsRequestValidationError{
				field:  "Sort",
				reason: "value must be in list [created_at updated_at]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetDirection() != "" {

		if _, ok := _GetAllCommentsRequest_Direction_InLookup[m.GetDirection()]; !ok {
			err := GetAllCommentsRequestValidationError{
				field:  "Direction",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetSize() != 0 {

		if m.GetSize() < 0 {
			err := GetAllCommentsRequestValidationError{
				field:  "Size",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			err := GetAllCommentsRequestValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetAllCommentsRequestMultiError(errors)
	}

	return nil
}

// GetAllCommentsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllCommentsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCommentsRequestMultiError) AllErrors() []error { return m }

// GetAllCommentsRequestValidationError is the validation error returned by
// GetAllCommentsRequest.Validate if the designated constraints aren't met.
type GetAllCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCommentsRequestValidationError) ErrorName() string {
	return "GetAllCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCommentsRequestValidationError{}

var _GetAllCommentsRequest_Sort_InLookup = map[string]struct{}{
	"created_at": {},
	"updated_at": {},
}

var _GetAllCommentsRequest_Direction_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on GetAllCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllCommentsResponseMultiError, or nil if none found.
func (m *GetAllCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllCommentsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllCommentsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllCommentsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllCommentsResponseMultiError(errors)
	}

	return nil
}

// GetAllCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCommentsResponseMultiError) AllErrors() []error { return m }

// GetAllCommentsResponseValidationError is the validation error returned by
// GetAllCommentsResponse.Validate if the designated constraints aren't met.
type GetAllCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCommentsResponseValidationError) ErrorName() string {
	return "GetAllCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCommentsResponseValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRequestMultiError, or nil if none found.
func (m *GetCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCommentRequestMultiError(errors)
	}

	return nil
}

// GetCommentRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRequestMultiError) AllErrors() []error { return m }

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on GetCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentResponseMultiError, or nil if none found.
func (m *GetCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommentResponseMultiError(errors)
	}

	return nil
}

// GetCommentResponseMultiError is an error wrapping multiple validation errors
// returned by GetCommentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentResponseMultiError) AllErrors() []error { return m }

// GetCommentResponseValidationError is the validation error returned by
// GetCommentResponse.Validate if the designated constraints aren't met.
type GetCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentResponseValidationError) ErrorName() string {
	return "GetCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentResponseValidationError{}

// Validate checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentRequestMultiError, or nil if none found.
func (m *UpdateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		err := UpdateCommentRequestValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCommentRequestMultiError(errors)
	}

	return nil
}

// UpdateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentRequestMultiError) AllErrors() []error { return m }

// UpdateCommentRequestValidationError is the validation error returned by
// UpdateCommentRequest.Validate if the designated constraints aren't met.
type UpdateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentRequestValidationError) ErrorName() string {
	return "UpdateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscussionId

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uuid

	// no validation rules for Email

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Changelog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Changelog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Changelog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChangelogMultiError, or nil
// if none found.
func (m *Changelog) ValidateAll() error {
	return m.validate(true)
}

func (m *Changelog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChangelogValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChangelogValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChangelogValidationError{
					field:  fmt.Sprintf("Changes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChangelogMultiError(errors)
	}

	return nil
}

// ChangelogMultiError is an error wrapping multiple validation errors returned
// by Changelog.ValidateAll() if the designated constraints aren't met.
type ChangelogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangelogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangelogMultiError) AllErrors() []error { return m }

// ChangelogValidationError is the validation error returned by
// Changelog.Validate if the designated constraints aren't met.
type ChangelogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangelogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangelogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangelogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangelogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangelogValidationError) ErrorName() string { return "ChangelogValidationError" }

// Error satisfies the builtin error interface
func (e ChangelogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangelog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangelogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangelogValidationError{}

// Validate checks the field values on Change with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Change) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Change with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChangeMultiError, or nil if none found.
func (m *Change) ValidateAll() error {
	return m.validate(true)
}

func (m *Change) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeValidationError{
				field:  "Parent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangeMultiError(errors)
	}

	return nil
}

// ChangeMultiError is an error wrapping multiple validation errors returned by
// Change.ValidateAll() if the designated constraints aren't met.
type ChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeMultiError) AllErrors() []error { return m }

// ChangeValidationError is the validation error returned by Change.Validate if
// the designated constraints aren't met.
type ChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeValidationError) ErrorName() string { return "ChangeValidationError" }

// Error satisfies the builtin error interface
func (e ChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeValidationError{}

// Validate checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Asset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Asset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AssetMultiError, or nil if none found.
func (m *Asset) ValidateAll() error {
	return m.validate(true)
}

func (m *Asset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Urn

	// no validation rules for Type

	// no validation rules for Service

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLabels()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Labels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Labels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOwners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssetValidationError{
						field:  fmt.Sprintf("Owners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssetValidationError{
					field:  fmt.Sprintf("Owners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChangelog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Changelog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "Changelog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChangelog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "Changelog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssetMultiError(errors)
	}

	return nil
}

// AssetMultiError is an error wrapping multiple validation errors returned by
// Asset.ValidateAll() if the designated constraints aren't met.
type AssetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetMultiError) AllErrors() []error { return m }

// AssetValidationError is the validation error returned by Asset.Validate if
// the designated constraints aren't met.
type AssetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetValidationError) ErrorName() string { return "AssetValidationError" }

// Error satisfies the builtin error interface
func (e AssetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAsset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetValidationError{}

// Validate checks the field values on Discussion with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Discussion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Discussion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiscussionMultiError, or
// nil if none found.
func (m *Discussion) ValidateAll() error {
	return m.validate(true)
}

func (m *Discussion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Body

	// no validation rules for Type

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscussionValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscussionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscussionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscussionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscussionMultiError(errors)
	}

	return nil
}

// DiscussionMultiError is an error wrapping multiple validation errors
// returned by Discussion.ValidateAll() if the designated constraints aren't met.
type DiscussionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscussionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscussionMultiError) AllErrors() []error { return m }

// DiscussionValidationError is the validation error returned by
// Discussion.Validate if the designated constraints aren't met.
type DiscussionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscussionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscussionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscussionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscussionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscussionValidationError) ErrorName() string { return "DiscussionValidationError" }

// Error satisfies the builtin error interface
func (e DiscussionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscussion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscussionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscussionValidationError{}

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DiscussionId

	// no validation rules for Body

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedBy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedBy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "UpdatedBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}
