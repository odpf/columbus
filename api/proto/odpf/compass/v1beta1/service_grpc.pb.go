// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: odpf/compass/v1beta1/service.proto

package compassv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompassServiceClient is the client API for CompassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompassServiceClient interface {
	// Domain: Discussion
	GetAllDiscussions(ctx context.Context, in *GetAllDiscussionsRequest, opts ...grpc.CallOption) (*GetAllDiscussionsResponse, error)
	CreateDiscussion(ctx context.Context, in *CreateDiscussionRequest, opts ...grpc.CallOption) (*CreateDiscussionResponse, error)
	GetDiscussion(ctx context.Context, in *GetDiscussionRequest, opts ...grpc.CallOption) (*GetDiscussionResponse, error)
	PatchDiscussion(ctx context.Context, in *PatchDiscussionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	GetAllComments(ctx context.Context, in *GetAllCommentsRequest, opts ...grpc.CallOption) (*GetAllCommentsResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type compassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompassServiceClient(cc grpc.ClientConnInterface) CompassServiceClient {
	return &compassServiceClient{cc}
}

func (c *compassServiceClient) GetAllDiscussions(ctx context.Context, in *GetAllDiscussionsRequest, opts ...grpc.CallOption) (*GetAllDiscussionsResponse, error) {
	out := new(GetAllDiscussionsResponse)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/GetAllDiscussions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) CreateDiscussion(ctx context.Context, in *CreateDiscussionRequest, opts ...grpc.CallOption) (*CreateDiscussionResponse, error) {
	out := new(CreateDiscussionResponse)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/CreateDiscussion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetDiscussion(ctx context.Context, in *GetDiscussionRequest, opts ...grpc.CallOption) (*GetDiscussionResponse, error) {
	out := new(GetDiscussionResponse)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/GetDiscussion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) PatchDiscussion(ctx context.Context, in *PatchDiscussionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/PatchDiscussion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetAllComments(ctx context.Context, in *GetAllCommentsRequest, opts ...grpc.CallOption) (*GetAllCommentsResponse, error) {
	out := new(GetAllCommentsResponse)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/GetAllComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/odpf.compass.v1beta1.CompassService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompassServiceServer is the server API for CompassService service.
// All implementations must embed UnimplementedCompassServiceServer
// for forward compatibility
type CompassServiceServer interface {
	// Domain: Discussion
	GetAllDiscussions(context.Context, *GetAllDiscussionsRequest) (*GetAllDiscussionsResponse, error)
	CreateDiscussion(context.Context, *CreateDiscussionRequest) (*CreateDiscussionResponse, error)
	GetDiscussion(context.Context, *GetDiscussionRequest) (*GetDiscussionResponse, error)
	PatchDiscussion(context.Context, *PatchDiscussionRequest) (*emptypb.Empty, error)
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	GetAllComments(context.Context, *GetAllCommentsRequest) (*GetAllCommentsResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*emptypb.Empty, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCompassServiceServer()
}

// UnimplementedCompassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompassServiceServer struct {
}

func (UnimplementedCompassServiceServer) GetAllDiscussions(context.Context, *GetAllDiscussionsRequest) (*GetAllDiscussionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDiscussions not implemented")
}
func (UnimplementedCompassServiceServer) CreateDiscussion(context.Context, *CreateDiscussionRequest) (*CreateDiscussionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscussion not implemented")
}
func (UnimplementedCompassServiceServer) GetDiscussion(context.Context, *GetDiscussionRequest) (*GetDiscussionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscussion not implemented")
}
func (UnimplementedCompassServiceServer) PatchDiscussion(context.Context, *PatchDiscussionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDiscussion not implemented")
}
func (UnimplementedCompassServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedCompassServiceServer) GetAllComments(context.Context, *GetAllCommentsRequest) (*GetAllCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllComments not implemented")
}
func (UnimplementedCompassServiceServer) GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedCompassServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedCompassServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedCompassServiceServer) mustEmbedUnimplementedCompassServiceServer() {}

// UnsafeCompassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompassServiceServer will
// result in compilation errors.
type UnsafeCompassServiceServer interface {
	mustEmbedUnimplementedCompassServiceServer()
}

func RegisterCompassServiceServer(s grpc.ServiceRegistrar, srv CompassServiceServer) {
	s.RegisterService(&CompassService_ServiceDesc, srv)
}

func _CompassService_GetAllDiscussions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDiscussionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAllDiscussions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/GetAllDiscussions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAllDiscussions(ctx, req.(*GetAllDiscussionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_CreateDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).CreateDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/CreateDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).CreateDiscussion(ctx, req.(*CreateDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/GetDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetDiscussion(ctx, req.(*GetDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_PatchDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchDiscussionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).PatchDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/PatchDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).PatchDiscussion(ctx, req.(*PatchDiscussionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetAllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetAllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/GetAllComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetAllComments(ctx, req.(*GetAllCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.compass.v1beta1.CompassService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompassService_ServiceDesc is the grpc.ServiceDesc for CompassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.compass.v1beta1.CompassService",
	HandlerType: (*CompassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDiscussions",
			Handler:    _CompassService_GetAllDiscussions_Handler,
		},
		{
			MethodName: "CreateDiscussion",
			Handler:    _CompassService_CreateDiscussion_Handler,
		},
		{
			MethodName: "GetDiscussion",
			Handler:    _CompassService_GetDiscussion_Handler,
		},
		{
			MethodName: "PatchDiscussion",
			Handler:    _CompassService_PatchDiscussion_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _CompassService_CreateComment_Handler,
		},
		{
			MethodName: "GetAllComments",
			Handler:    _CompassService_GetAllComments_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _CompassService_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _CompassService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CompassService_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/compass/v1beta1/service.proto",
}
