"use strict";(self.webpackChunkcompass=self.webpackChunkcompass||[]).push([[115],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(a),d=r,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||s;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<s;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:function(e,t,a){a.d(t,{Z:function(){return o}});var n=a(7294),r=a(6010),s="tabItem_Ymn6";function o(e){var t=e.children,a=e.hidden,o=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:a},t)}},5488:function(e,t,a){a.d(t,{Z:function(){return d}});var n=a(7462),r=a(7294),s=a(6010),o=a(2389),i=a(7392),l=a(7094),u=a(2466),p="tabList__CuJ",c="tabItem_LNqP";function m(e){var t,a,o=e.lazy,m=e.block,d=e.defaultValue,f=e.values,h=e.groupId,b=e.className,y=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=f?f:y.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,i.l)(k,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===d?d:null!=(t=null!=d?d:null==(a=y.find((function(e){return e.props.default})))?void 0:a.props.value)?t:y[0].props.value;if(null!==g&&!k.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.U)(),w=N.tabGroupChoices,C=N.setTabGroupChoices,T=(0,r.useState)(g),I=T[0],O=T[1],j=[],A=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var P=w[h];null!=P&&P!==I&&k.some((function(e){return e.value===P}))&&O(P)}var E=function(e){var t=e.currentTarget,a=j.indexOf(t),n=k[a].value;n!==I&&(A(t),O(n),null!=h&&C(h,String(n)))},x=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n,r=j.indexOf(e.currentTarget)+1;a=null!=(n=j[r])?n:j[0];break;case"ArrowLeft":var s,o=j.indexOf(e.currentTarget)-1;a=null!=(s=j[o])?s:j[j.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":m},b)},k.map((function(e){var t=e.value,a=e.label,o=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,key:t,ref:function(e){return j.push(e)},onKeyDown:x,onFocus:E,onClick:E},o,{className:(0,s.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":I===t})}),null!=a?a:t)}))),o?(0,r.cloneElement)(y.filter((function(e){return e.props.value===I}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==I})}))))}function d(e){var t=(0,o.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},855:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return d}});var n=a(7462),r=a(3366),s=(a(7294),a(3905)),o=a(5488),i=a(5162),l=["components"],u={},p="1. My First Asset",c={unversionedId:"tour/my-first-asset",id:"tour/my-first-asset",title:"1. My First Asset",description:"Pre-Requisites",source:"@site/docs/tour/1-my-first-asset.md",sourceDirName:"tour",slug:"/tour/my-first-asset",permalink:"/compass/tour/my-first-asset",draft:!1,editUrl:"https://github.com/raystack/compass/edit/master/docs/docs/tour/1-my-first-asset.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/compass/tour/introduction"},next:{title:"2. Querying your Assets",permalink:"/compass/tour/querying-assets"}},m={},d=[{value:"Pre-Requisites",id:"pre-requisites",level:3},{value:"1.1 Introduction",id:"11-introduction",level:2},{value:"1.2 Hello, <del>World</del> Asset!",id:"12-hello-world-asset",level:2},{value:"1.3 Sending your first asset to Compass",id:"13-sending-your-first-asset-to-compass",level:2},{value:"Conclusion",id:"conclusion",level:2}],f={toc:d};function h(e){var t=e.components,a=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"1-my-first-asset"},"1. My First Asset"),(0,s.kt)("h3",{id:"pre-requisites"},"Pre-Requisites"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("a",{parentName:"li",href:"/compass/configuration#server-setup"},"Setting up server")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("a",{parentName:"li",href:"/compass/configuration#client-initialisation"},"Setting up the CLI")," (if you want to use the CLI client)")),(0,s.kt)("h2",{id:"11-introduction"},"1.1 Introduction"),(0,s.kt)("p",null,"In Compass, we call every metadata that you input as an ",(0,s.kt)("a",{parentName:"p",href:"../concepts/asset"},"Asset"),". All your tables, dashboards, topics, jobs are an example of assets."),(0,s.kt)("p",null,"In this section, we will help you to build your first Asset and hopefully it will give your clear idea about what an Asset is in Compass."),(0,s.kt)("h2",{id:"12-hello-world-asset"},"1.2 Hello, ",(0,s.kt)("del",{parentName:"h2"},"World")," Asset!"),(0,s.kt)("p",null,"Let's imagine we have a ",(0,s.kt)("inlineCode",{parentName:"p"},"postgres")," instance that we keep referring to as our ",(0,s.kt)("inlineCode",{parentName:"p"},"main-postgres"),". Inside it there is a database called ",(0,s.kt)("inlineCode",{parentName:"p"},"my-database")," that has plenty of tables. One of the tables is named ",(0,s.kt)("inlineCode",{parentName:"p"},"orders"),", and below is how you represent that ",(0,s.kt)("inlineCode",{parentName:"p"},"table")," as a Compass' Asset."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "urn": "main-postgres:my-database.orders",\n  "type": "table",\n  "service": "postgres",\n  "name": "orders",\n  "data": {\n    "database": "my-database",\n    "namespace": "main-postgres"\n  }\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"urn")," is a unique name you assign to an asset. You need to make sure you don't have a duplicate urns across all of your assets because Compass treats ",(0,s.kt)("inlineCode",{parentName:"p"},"urn")," as an identifier of your asset. For this example, we use the following format to make sure our urn is unique, ",(0,s.kt)("inlineCode",{parentName:"p"},"{NAMESPACE}:{DB_NAME}.{TABLE_NAME}"),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"type")," is your Asset's type. The value for type has to be recognizable by Compass. More info about Asset's Type can be found ",(0,s.kt)("a",{parentName:"p",href:"../concepts/type"},"here"),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"service")," can be seen as the source of your asset. ",(0,s.kt)("inlineCode",{parentName:"p"},"service")," can be anything, in this case since our ",(0,s.kt)("inlineCode",{parentName:"p"},"orders")," table resides in ",(0,s.kt)("inlineCode",{parentName:"p"},"postgres"),", we can just put ",(0,s.kt)("inlineCode",{parentName:"p"},"postgres")," as the service.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"name")," is the name of your asset, it does not have to be unique. We don't need to worry to get mixed up if there are other tables with the same name, ",(0,s.kt)("inlineCode",{parentName:"p"},"urn")," will be the main identifier for your asset, that is why we need to make it unique across all of your assets.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"data")," can hold your asset's extra details if there is any. In the example, we use it to store information of the ",(0,s.kt)("strong",{parentName:"p"},"database name")," and the ",(0,s.kt)("strong",{parentName:"p"},"alias/namespace")," that we use when referring the postgres instance."))),(0,s.kt)("h2",{id:"13-sending-your-first-asset-to-compass"},"1.3 Sending your first asset to Compass"),(0,s.kt)("p",null,"Assets can be created ingested in Compass using the following ways:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Using ",(0,s.kt)("inlineCode",{parentName:"li"},"compass asset edit")," CLI command "),(0,s.kt)("li",{parentName:"ol"},"Calling to ",(0,s.kt)("inlineCode",{parentName:"li"},"PATCH /v1beta1/assets")," API")),(0,s.kt)("p",null,"Let's send this into Compass so that it would be discoverable."),(0,s.kt)(o.Z,{groupId:"api",mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"cli",label:"CLI",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ compass asset edit --body=<path to the asset.json file>\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "asset": {\n        "urn": "main-postgres:my-database.orders",\n        "type": "table",\n        "service": "postgres",\n        "name": "orders",\n        "data": {\n            "database": "my-database",\n            "namespace": "main-postgres"\n        }\n    }\n}\n'))),(0,s.kt)(i.Z,{value:"http",label:"HTTP",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl --location --request PATCH \'http://localhost:8080/v1beta1/assets\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Compass-User-UUID: john.doe@example.com\' \\\n--data-raw \'{\n    "asset": {\n        "urn": "main-postgres:my-database.orders",\n        "type": "table",\n        "service": "postgres",\n        "name": "orders",\n        "data": {\n            "database": "my-database",\n            "namespace": "main-postgres"\n        }\n    }\n}\'\n')))),(0,s.kt)("p",null,"There are a few things to notice here:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"The HTTP method used is ",(0,s.kt)("inlineCode",{parentName:"p"},"PATCH"),". This is because Compass does not have a dedicated ",(0,s.kt)("inlineCode",{parentName:"p"},"Create")," API, it uses a single API to ",(0,s.kt)("inlineCode",{parentName:"p"},"Patch / Create")," an asset instead. So when updating or patching your asset, you can use the same API. Similarly we use ",(0,s.kt)("inlineCode",{parentName:"p"},"compass asset edit"),"  for upserting via the Compass CLI tool")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Compass requires ",(0,s.kt)("inlineCode",{parentName:"p"},"Compass-User-UUID")," header to be in the request. More information about the identity header can be found ",(0,s.kt)("a",{parentName:"p",href:"../concepts/user"},"here"),". To simplify this tour, let's just use ",(0,s.kt)("inlineCode",{parentName:"p"},"john.doe@example.com"),". For CLI, these configurations are to be done in the config file discussed ",(0,s.kt)("a",{parentName:"p",href:"/compass/configuration#required-headermetadata-in-api"},"here"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"When sending our asset to Compass, we need to put our asset object inside an ",(0,s.kt)("inlineCode",{parentName:"p"},"asset")," field as shown in the example above")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"For using the CLI tool, create a .json file using the example configurations shown above and provide the path to it here."))),(0,s.kt)("p",null,"On a success insertion, your will receive below response:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{ "id": "cebeb793-8933-434c-b38f-beb6dbad91a5" }\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"id")," is an identifier of your asset. Unlike ",(0,s.kt)("inlineCode",{parentName:"p"},"urn")," which is provided by you, ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," is auto generated by Compass if there was no asset found with the given URN."),(0,s.kt)("h2",{id:"conclusion"},"Conclusion"),(0,s.kt)("p",null,"Now that you have successfully ingested your asset to Compass, we can now search and find it via Compass."),(0,s.kt)("p",null,"In the next section, we will see how Compass can help you in searching and discovering your assets."))}h.isMDXComponent=!0}}]);